
<MudAppBar Color="Color.Primary" Fixed="false">

    <MudIconButton OnClick="@OpenHandler" Icon="@Icons.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />

    <a class="brand-wrapper" href="/">
        <span class="brand-name1">Sola</span>
        <span class="brand-name2">ERP</span>
    </a>

    <MudSpacer />

    <MudTooltip Text="@fullName" Duration="500">
        <div class="k-mx-2">
            <a href="profile">
                <MudAvatar Class="avatar-button" Image="@avatar" Color="Color.Default">
                    <MudText Typo="Typo.h6" Color="Color.Dark">@initials</MudText>
                </MudAvatar>
            </a>
        </div>
    </MudTooltip>

    <MudTooltip Text="Change theme" Duration="500">
        <MudToggleIconButton Icon="@Icons.Filled.DarkMode" Color="@Color.Inherit"
                             ToggledIcon="@Icons.Filled.LightMode" ToggledColor="@Color.Inherit" Toggled="AppState.IsDarkMode" ToggledChanged="@ChangeTheme" />
    </MudTooltip>
    
    <form method="post" action="Identity/Account/Logout">
        <MudTooltip Text="Log out" Duration="500">
            <MudIconButton Icon="@Icons.Filled.Logout" Color="Color.Inherit" OnClick="@ClearUserToken" ButtonType="MudBlazor.ButtonType.Submit"></MudIconButton>
        </MudTooltip>
    </form>

</MudAppBar>

@code {
    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter] public bool Open { get; set; }
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    string? avatar;
    string? fullName;
    string? initials;

    //bool isDarkMode = false;

    protected override void OnParametersSet()
    {
        avatar = (SessionData.CurrentUser != null && SessionData.CurrentUser.Photo != null ? string.Format($"data:image/png;base64," + Convert.ToBase64String(SessionData.CurrentUser.Photo)) : null);
        fullName = (SessionData.CurrentUser != null && SessionData.CurrentUser.FullName != null ? SessionData.CurrentUser.FullName : null);
        if (fullName != null)
        {
            var stringList = fullName.Split(' ').ToList();
            var firstLetters = stringList.Where(s => s.Length > 0).Take(3).Select(e => e.Substring(0, 1).ToUpper());
            initials = string.Join("", firstLetters);
        }
    }

    async Task OpenHandler()
    {
        Open = !Open;
        await OpenChanged.InvokeAsync(Open);
    }

    void ChangeTheme(bool value)
    {
        AppState.ChangeTheme();
    }

    async Task ClearUserToken()
    {
        await LocalStorage.SetItemAsync("logged_user_token", "");
    }
}

<style>
    .avatar-button {
    }

        .avatar-button:hover {
            outline: solid 4px #41389f;
            border-radius: 50%;
        }

    .brand-wrapper {
        font-size: 1rem;
        padding-left: 10px;
        padding-right: 10px;
        text-decoration: none;
        color: inherit;
    }

        .brand-wrapper:hover {
            color: inherit;
        }

            .brand-wrapper:hover .brand-name1 {
                margin-left: -2px;
                transition: all .2s ease;
            }

            .brand-wrapper:hover .brand-name2 {
                margin-left: 4px;
                transition: all .2s ease;
            }
</style>