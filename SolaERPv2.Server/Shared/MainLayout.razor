@layout TelerikLayout
@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBreakpointService BreakpointListener


<HeadContent>
    <link rel="stylesheet" href="/css/kendo/@(_appState.IsDarkMode ? "dark" : "light").css">
</HeadContent>


<MudThemeProvider DefaultScrollbar="false" Theme="Theme.DefaultTheme" @bind-IsDarkMode="_appState.IsDarkMode" />
<MudSnackbarProvider />
<MudDialogProvider FullWidth="false"
                   MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   CloseOnEscapeKey="true"
                   Position="DialogPosition.Center" />



<CascadingValue Value="_appState">
    <AuthorizeView>
        <Authorized>
            <div>
                <AppBar @bind-Open="@_appState.OpenDrawer" />
                <NavMenu @bind-Open="@_appState.OpenDrawer" />
                <ReadAccess>
                    <MenuBar />
                    <div class="body-content">
                        @Body
                    </div>
                </ReadAccess>
            </div>
        </Authorized>
        <NotAuthorized>
            <div>Loading...</div>
        </NotAuthorized>
    </AuthorizeView>
    <TelerikLoaderContainer Visible="@(_appState.Loading)" LoaderType="LoaderType.InfiniteSpinner" />
    <TelerikMediaQuery Media="(max-width: 768px)" OnChange="@OnMobileViewChanged" />
</CascadingValue>


@code {
    AppState? _appState = new();
    Guid _breakpointSubscriptionId;
    
    protected override async Task OnInitializedAsync()
    {
        _appState = new AppState(Snackbar);
        _appState.OnRefreshClick += Refresh;
        _appState.OnChangeThemeClick += ChangeTheme;
        
        await AppUserService.UserLoggedIn();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await BreakpointListener.Unsubscribe(_breakpointSubscriptionId);
        if (_appState != null)
        {
            _appState.OnRefreshClick -= Refresh;
            _appState.OnChangeThemeClick -= ChangeTheme;
        }
        await AppUserService.UserLoggedOut();
    }

    async void Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    async Task GetTheme()
    {
        if (await LocalStorage.ContainKeyAsync("theme"))
        {
            _appState.IsDarkMode = await LocalStorage.GetItemAsStringAsync("theme") == "dark";
        }
        else
        {
            _appState.IsDarkMode = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    async void ChangeTheme()
    {
        _appState.IsDarkMode = !_appState.IsDarkMode;
        await LocalStorage.SetItemAsStringAsync("theme", _appState.IsDarkMode ? "dark" : "light");
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authenticationState = await AuthenticationStateProvider?.GetAuthenticationStateAsync();
        var isAuthenticated = authenticationState?.User.Identity is { IsAuthenticated: true };
        if (firstRender)
        {
            await GetTheme();
            var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
            {
                _appState.MudBreakpoint = breakpoint.ToString();
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
            {
                ReportRate = 250,
                NotifyOnBreakpointOnly = true,
            });
            _appState.MudBreakpoint = subscriptionResult.Breakpoint.ToString();
            _breakpointSubscriptionId = subscriptionResult.SubscriptionId;
            await InvokeAsync(StateHasChanged);
        }
        switch (firstRender)
        {
            case true when isAuthenticated:
                await LocalStorage.SetItemAsync("logged_user_token", SessionData.CurrentUser.UserToken);
                break;
            case true when !isAuthenticated:
                NavigationManager.NavigateTo("Identity/Account/Login", true);
                break;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void OnMobileViewChanged(bool mobileView)
    {
        if (_appState != null) { _appState.MobileView = mobileView; }
    }
}

<style>
    .body-content {
        padding: 1.25rem;
        width: 100%;
        height: calc(100vh - 132px);
        overflow: auto;
    }

    .k-pager-sizes .k-dropdown-list, .k-pager-sizes .k-dropdown, .k-pager-sizes .k-dropdownlist, .k-pager-sizes > select {
        width: 6em;
    }

    .k-toolbar .k-button {
        min-height: 30px;
    }

    .k-loader-container {
        z-index: 10009;
    }
</style>