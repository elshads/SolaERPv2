@layout TelerikLayout
@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider


<HeadContent>
    <link rel="stylesheet" href="@(SessionData != null ? $"/css/kendo/{SessionData?.CurrentUser?.Theme}.css" : "/css/kendo/light.css")">
</HeadContent>
<MudThemeProvider IsDarkMode="@(SessionData is {CurrentUser.Theme: "dark" })" />


<MudSnackbarProvider />
<MudDialogProvider FullWidth="false"
                   MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center" />



<CascadingValue Value="_appState">
    <AuthorizeView>
        <Authorized>
            <div>
                <AppBar @bind-Open="@_appState.OpenDrawer" />
                <NavMenu @bind-Open="@_appState.OpenDrawer" />
                <ReadAccess>
                    <MenuBar />
                    <div class="body-content">
                        @Body
                    </div>
                </ReadAccess>
            </div>
        </Authorized>
        <NotAuthorized>
            <div>Loading...</div>
        </NotAuthorized>
    </AuthorizeView>
    <TelerikLoaderContainer Visible="@(_appState.Loading)" LoaderType="LoaderType.InfiniteSpinner" />
    <TelerikMediaQuery Media="(max-width: 768px)" OnChange="@OnMobileViewChanged" />
</CascadingValue>


@code {
    AppState? _appState = new();

    protected override async Task OnInitializedAsync()
    {
        _appState = new AppState(Snackbar);
        _appState.OnRefreshClick += Refresh;
        await AppUserService.UserLoggedIn();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if(_appState != null) { _appState.OnRefreshClick -= Refresh; }
        await AppUserService.UserLoggedOut();
    }

    async void Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authenticationState = await AuthenticationStateProvider?.GetAuthenticationStateAsync();
        var isAuthenticated = authenticationState?.User.Identity is {IsAuthenticated: true };
        if (firstRender && !isAuthenticated)
        {
            NavigationManager.NavigateTo("Identity/Account/Login", true);
        }
    }

    void OnMobileViewChanged(bool mobileView)
    {
        if(_appState != null) { _appState.MobileView = mobileView; }
    }
}

<style>
    .body-content {
        padding: 1.25rem;
        width: 100%;
        height: calc(100vh - 132px);
        overflow: auto;
    }

    .k-pager-sizes .k-dropdown-list, .k-pager-sizes .k-dropdown, .k-pager-sizes .k-dropdownlist, .k-pager-sizes > select {
        width: 6em;
    }

    .k-toolbar .k-button {
        min-height: 30px;
    }

    .k-loader-container {
        z-index: 10009;
    }
</style>