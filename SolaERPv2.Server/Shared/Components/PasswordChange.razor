<TelerikDialog Visible="@Visible"
               VisibleChanged="@VisibleChangedHandler"
               Title="Change Password"
               CloseOnOverlayClick="false"
               Width="300px"
               ShowCloseButton="true">
    <DialogContent>
        <div>
            <EditForm EditContext="@passwordContext">
                <DataAnnotationsValidator @ref="passwordValidator" />

                <div class="k-form-field k-pb-4">
                    <label for="password" class="k-label k-form-label k-pb-1">Password: </label>
                    <div class="k-form-field-wrap">
                        <TelerikTextBox Id="password" Password="true" @bind-Value="@passwordModel.Password" />
                        <TelerikValidationMessage For="@(() => passwordModel.Password)" />
                    </div>
                </div>

                <div class="k-form-field k-pb-4">
                    <label for="passwordconfirmation" class="k-label k-form-label k-pb-1">Password Confirmation: </label>
                    <div class="k-form-field-wrap">
                        <TelerikTextBox Id="passwordconfirmation" Password="true" @bind-Value="@passwordModel.PasswordConfirmation" />
                        <TelerikValidationMessage For="@(() => passwordModel.PasswordConfirmation)" />
                    </div>
                </div>

            </EditForm>
        </div>
    </DialogContent>
    <DialogButtons>
        <TelerikButton Rounded="@Telerik.Blazor.ThemeConstants.Button.Rounded.Small" OnClick="@ChangePassword" ThemeColor="primary">Change Password</TelerikButton>
        <TelerikButton Rounded="@Telerik.Blazor.ThemeConstants.Button.Rounded.Small" OnClick="@CloseHandler">Cancel</TelerikButton>
    </DialogButtons>
</TelerikDialog>

@code {
    [CascadingParameter] public AppState AppState { get; set; }

    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter] public AppUser? AppUser { get; set; }

    PasswordModel? passwordModel = new();
    EditContext? passwordContext;
    DataAnnotationsValidator? passwordValidator;

    protected override void OnInitialized()
    {
        passwordContext = new(passwordModel);
    }

    async Task VisibleChangedHandler(bool visible)
    {
        Visible = visible;
        passwordModel = new();
        await VisibleChanged.InvokeAsync(Visible);
    }

    async Task CloseHandler()
    {
        Visible = false;
        passwordModel = new();
        await VisibleChanged.InvokeAsync(Visible);
    }

    async Task ChangePassword()
    {
        var isValid = passwordContext.Validate();
        if (isValid)
        {
            var token = await UserManager.GeneratePasswordResetTokenAsync(AppUser);
            var result = await UserManager.ResetPasswordAsync(AppUser, token, passwordModel.Password);
            if (result.Succeeded)
            {
                AppState.ShowAlert("Password successfully changed", Severity.Success);
            }
            else
            {
                AppState.ShowAlert(result.Errors.FirstOrDefault().Description, Severity.Error);
            }

            await CloseHandler();
        }
    }

    public class PasswordModel
    {
        [Display(Name = "Password*: ")]
        [MinLength(6, ErrorMessage = "Your password should be at least 6 characters.")]
        [Required(ErrorMessage = "Your password should be at least 6 characters.")]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [Display(Name = "Password Confirmation*:")]
        [MinLength(6, ErrorMessage = "Your password should be at least 6 characters.")]
        [Required(ErrorMessage = "Your password should be at least 6 characters.")]
        [DataType(DataType.Password)]
        [Compare("Password")]
        public string? PasswordConfirmation { get; set; }
    }
}
