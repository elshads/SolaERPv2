<TelerikDialog Visible="@Visible"
               @ref="dialogRef"
               VisibleChanged="@VisibleChangedHandler"
               Title="@($"Attachments {Title}")"
               CloseOnOverlayClick="false"
               ShowCloseButton="true">
    <DialogContent>
        <MudProgressLinear Color="@(fileLoading ? Color.Primary : Color.Transparent)" Indeterminate="true" />
        <TelerikFileSelect AllowedExtensions="@(AppSettings.AllowedFileExtensions)"
                           MaxFileSize="@(AppSettings.MaxFileSize)"
                           Enabled="@(!fileLoading)"
                           Multiple="true"
                           OnSelect="@OnAttachmentSelect">
        </TelerikFileSelect>
        <div class="k-form-hint pb-1">
            @if (fileLoading)
            {
                <div class="k-text-error">
                    Loading file: @(currentAttachment.FileName)
                    @(currentAttachment.Size >= 1048576 ? $"Size: {(currentAttachment.Size / 1024 / 1024).ToString("N2")}MB " : currentAttachment.Size >= 1024 ? $"Size: {(currentAttachment.Size / 1024).ToString("N2")}KB " : currentAttachment.Size > 0 ? $"Size: {(currentAttachment.Size).ToString("N2")}BYTES " : "")
                    . &nbsp Do not close this window while loading
                </div>
            }
            else
            {
                <div>Allowed files: @(AppSettings.AllowedFileExtensions != null ? String.Join(", ", AppSettings.AllowedFileExtensions) : "") up to @(AppSettings.MaxFileSize / 1024 / 1024)MB</div>
            }
        </div>
        <TelerikGrid Data="@AttachmentList"
                     @ref="gridRef"
                     Height="265px"
                     Sortable="false"
                     Groupable="false"
                     Resizable="false"
                     Reorderable="false"
                     SelectionMode="GridSelectionMode.Multiple"
                     OnDelete="@DeleteAttachment">
            <GridColumns>
                <GridColumn Field="@(nameof(Attachment.FileName))" Title="Files" Width="@(AppState.MobileView ? "360px" : "auto")" />
                <GridCommandColumn ShowColumnMenu="false" Reorderable="false" Visible="true" Width="90px">
                    <GridCommandButton Icon="download" ShowInEdit="false" Enabled="@(!fileLoading)" Title="Download" OnClick="@(() => DownloadAttachment(context as Attachment))" />
                    <GridCommandButton Command="Delete" Icon="delete" ShowInEdit="false" Enabled="@(!fileLoading)" Title="Delete" />
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@(() => DialogClosed())">Close</TelerikButton>
    </DialogButtons>
</TelerikDialog>



@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<IEnumerable<Attachment>> OnDelete { get; set; }
    [Parameter] public EventCallback<Attachment> OnDownloadClick { get; set; }
    [Parameter] public int AttachmentTypeId { get; set; } = new();
    [Parameter] public int AttachmentSubTypeId { get; set; } = new();
    [Parameter] public string? DocumentReference { get; set; }
    [Parameter] public string? Title { get; set; } = "";
    [Parameter] public int SourceId { get; set; }
    [Parameter] public string? SourceTypeName { get; set; }
    [Parameter] public List<Attachment>? AttachmentList { get; set; } = new();
    [Parameter] public EventCallback<List<Attachment>> AttachmentListChanged { get; set; }

    List<Attachment>? deletedAttachmentList = new();
    TelerikDialog? dialogRef;
    TelerikGrid<Attachment>? gridRef;
    bool fileLoading = false;
    Attachment currentAttachment = new();

    async Task VisibleChangedHandler(bool visible)
    {
        Visible = visible;
        if (!visible)
        {
            await DialogClosed();
        }
    }

    async Task OnAttachmentSelect(FileSelectEventArgs args)
    {
        fileLoading = true;

        foreach (var file in args.Files)
        {
            if (!file.InvalidExtension && !file.InvalidMaxFileSize)
            {
                currentAttachment = new() { FileName = file.Name, Size = file.Size, };
                dialogRef?.Refresh();

                await using MemoryStream ms = new();
                await file.Stream.CopyToAsync(ms);
                var fileData = ms.ToArray();
                currentAttachment = new Attachment
                    {
                        AttachmentId = 0,
                        SourceId = this.SourceId,
                        SourceTypeName = this.SourceTypeName,
                        AttachmentTypeId = this.AttachmentTypeId,
                        AttachmentSubTypeId = this.AttachmentSubTypeId,
                        Reference = DocumentReference,
                        ExtensionType = file.Extension,
                        FileData = fileData,
                        FileName = file.Name,
                        Size = file.Size,
                    };
                AttachmentList?.Add(currentAttachment);
            }
            else if (file.InvalidExtension && file.InvalidMaxFileSize)
            {
                AppState?.ShowAlert($"File '{file.Name}' exceeds allowed size & Selected file type not allowed", Severity.Error);
            }
            else if (file.InvalidExtension)
            {
                AppState?.ShowAlert($"Selected file type not allowed for '{file.Name}'", Severity.Error);
            }
            else if (file.InvalidMaxFileSize)
            {
                AppState?.ShowAlert($"File '{file.Name}' exceeds allowed size", Severity.Error);
            }
        }
        await AttachmentListChanged.InvokeAsync(AttachmentList);

        fileLoading = false;
        gridRef?.Rebind();
        dialogRef?.Refresh();
    }

    public async Task UploadStream(IAsyncEnumerable<string> stream)
    {
        await foreach (var item in stream)
        {
            Console.WriteLine(item);
        }
    }

    async Task DialogClosed()
    {
        fileLoading = false;
        Visible = false;
        await OnClose.InvokeAsync();
    }

    async Task DownloadAttachment(Attachment attachment)
    {
        fileLoading = true;
        currentAttachment = attachment;
        dialogRef.Refresh();
        currentAttachment = attachment.AttachmentId > 0 ? await AttachmentService.GetByIdAsync(attachment.AttachmentId) : attachment;
        var fileStream = new MemoryStream(currentAttachment.FileData);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", currentAttachment?.FileName, streamRef);
        fileLoading = false;
        dialogRef.Refresh();

        await OnDownloadClick.InvokeAsync(attachment);
    }

    async Task DeleteAttachment(GridCommandEventArgs args)
    {
        var argsItem = args.Item as Attachment;
        var index = AttachmentList.IndexOf(argsItem);
        AttachmentList.RemoveAt(index);
        deletedAttachmentList?.Add(argsItem);
        await AttachmentListChanged.InvokeAsync(AttachmentList);
        await OnDelete.InvokeAsync(deletedAttachmentList);
        dialogRef?.Refresh();
    }
}


<style>
    .k-upload .k-upload-files {
        display: none;
    }
</style>