
<div class="@(LabelPosition == InputLabelPosition.Horizontal ? "horizontal-label" : "")">
    @if (LabelPosition != InputLabelPosition.NoLabel)
    {
        <label for="@Id"
           class="k-text-nowrap k-mr-2 @(LabelPosition == InputLabelPosition.Vertical ? "k-mb-1" : "k-pt-1 k-text-right")"
           style="width: @LabelWidth">
            @LabelText
        </label>
    }
    <div style="width: @TextBoxWidth">
        <TelerikDateInput Id="@Id"
                          Value="@Value"
                          ValueChanged="@ValueChangedHandler"
                          ValueExpression="() => Value"
                          Class="@(TextBoxAlign == TextAlign.Right ? "custom-text-right" : TextBoxAlign == TextAlign.Center ? "custom-text-center" : "custom-text-left")"
                          Enabled="@Enabled"
                          FillMode="@FillMode"
                          OnBlur="@OnBlurHandler"
                          OnChange="@OnChangeHandler"
                          Rounded="@Rounded"
                          Size="@Size"
                          TabIndex="@TabIndex"
                          Format="@Format" 
                          Max="@Max" 
                          Min="@Min" 
                          Placeholder="@Placeholder" 
                          T="DateTime"/>
        <TelerikValidationMessage For="@(() => Value)" />
    </div>
</div>

@code {
    [Parameter] public string? Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public DateTime Value { get; set; }
    [Parameter] public EventCallback<DateTime> ValueChanged { get; set; }
    [Parameter] public InputLabelPosition LabelPosition { get; set; } = InputLabelPosition.Vertical;
    [Parameter] public string? LabelText { get; set; } = "";
    [Parameter] public bool Enabled { get; set; } = true;
    [Parameter] public string? FillMode { get; set; } = ThemeConstants.TextBox.FillMode.Solid;
    [Parameter] public string? Rounded { get; set; } = ThemeConstants.TextBox.Rounded.Medium;
    [Parameter] public string? Size { get; set; } = ThemeConstants.TextBox.Size.Medium;
    [Parameter] public int? TabIndex { get; set; }
    [Parameter] public string? TextBoxWidth { get; set; } = "100%";
    [Parameter] public string? LabelWidth { get; set; } = "auto";
    [Parameter] public TextAlign TextBoxAlign { get; set; } = TextAlign.Right;
    [Parameter] public EventCallback OnBlur { get; set; }
    [Parameter] public EventCallback<object> OnChange { get; set; }
    [Parameter] public string Format { get; set; } = "yyyy-MM-dd";
    [Parameter] public DateTime Max { get; set; } = DateTime.MaxValue;
    [Parameter] public DateTime Min { get; set; } = DateTime.MinValue;
    [Parameter] public string? Placeholder { get; set; } = "";

    async Task ValueChangedHandler(DateTime value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);
    }

    async Task OnBlurHandler()
    {
        await OnBlur.InvokeAsync();
    }

    async Task OnChangeHandler(object value)
    {
        await OnChange.InvokeAsync(value);
    }

    public enum InputLabelPosition
    {
        Vertical,
        Horizontal,
        NoLabel
    }

    public enum TextAlign
    {
        Left,
        Right,
        Center
    }
}

<style>
    .horizontal-label {
        display: flex;
        flex-wrap: nowrap;
    }

    .custom-text-right .k-input-inner { 
        text-align: right;
    }

    .custom-text-center .k-input-inner { 
        text-align: center;
    }

    .custom-text-left .k-input-inner { 
        text-align: left;
    }
</style>
