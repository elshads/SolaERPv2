@page "/vendorevaluation"

@implements IDisposable
@inject VendorService VendorService
@inject CurrencyService CurrencyService
@inject ProductService ProductService
@inject CountryService CountryService
@inject PrequalificationCategoryService PrequalificationCategoryService
@inject DueDiligenceDesignService DueDiligenceDesignService


<MudCard Class="k-p-2 k-mb-8">
    <TelerikStepper Value="@_currentPageIndex" ValueChanged="CurrentPageIndexChangeHandler">
        <StepperSteps>
            <StepperStep Icon="home" Label="Company Info"></StepperStep>
            <StepperStep Icon="signature" Label="NDA"></StepperStep>
            <StepperStep Icon="dollar" Label="Bank Accounts"></StepperStep>
            <StepperStep Icon="zoom-in" Label="Due Diligence"></StepperStep>
            <StepperStep Icon="paste-plain-text" Label="Prequalification"></StepperStep>
        </StepperSteps>
    </TelerikStepper>
</MudCard>


@if (_currentStep == "initial")
{
    <RegisterSupplierInitial @ref="_registerSupplierInitial"
                         @bind-CurrentPerson="_currentPerson"
                         @bind-CurrentVendor="_currentVendor"
                         @bind-DeletedAttachmentIdList="_deletedAttachmentIdList"
                         ProductList="@_productList"
                         CountryList="@_countryList"
                         PaymentTermsList="@_paymentTermsList"
                         PrequalificationCategoryList="@_prequalificationCategoryList" />
}
else if (_currentStep == "nda")
{
    <RegisterSupplierNda @ref="_registerSupplierNda"
                     @bind-CurrentPerson="_currentPerson"
                     @bind-CurrentVendor="_currentVendor"
                     @bind-DeletedAttachmentIdList="_deletedAttachmentIdList" GlobalBusinessUnit="@_globalBusinessUnit" />
}
else if (_currentStep == "bank")
{
    <RegisterSupplierBank @ref="_registerSupplierBank"
                      @bind-CurrentPerson="_currentPerson"
                      @bind-CurrentVendor="_currentVendor"
                      @bind-DeletedAttachmentIdList="_deletedAttachmentIdList"
                      CurrencyList="@_currencyList" />
}
else if (_currentStep == "duediligence")
{
    <RegisterSupplierDueDiligence @ref="_registerSupplierDueDiligence"
                              @bind-CurrentPerson="_currentPerson"
                              @bind-CurrentVendor="_currentVendor"
                              @bind-DeletedAttachmentIdList="_deletedAttachmentIdList"
                              DueDiligenceDesignList="_dueDiligenceDesignList" />
}
else if (_currentStep == "prequalification")
{
    <RegisterSupplierPrequalification @ref="_registerSupplierPrequalification"
                                  @bind-CurrentPerson="_currentPerson"
                                  @bind-CurrentVendor="_currentVendor"
                                  @bind-DeletedAttachmentIdList="_deletedAttachmentIdList" />
}
else
{
    <div>Supplier Registration - Empty Page (contact developers)</div>
}


@code {

    [CascadingParameter] public AppState? AppState { get; set; }

    AppUser? _currentPerson { get; set; } = new();
    Vendor? _currentVendor { get; set; } = new();
    int _currentPageIndex { get; set; } = 0;
    List<int> _deletedAttachmentIdList = new();
    BusinessUnit? _globalBusinessUnit = new() { BusinessUnitName = "variableCompanyName", CountryCode="Azerbaijan", Address="variableAddress", TaxId="variableTaxId" };

    RegisterSupplierInitial? _registerSupplierInitial;
    RegisterSupplierNda? _registerSupplierNda;
    RegisterSupplierBank? _registerSupplierBank;
    RegisterSupplierDueDiligence? _registerSupplierDueDiligence;
    RegisterSupplierPrequalification? _registerSupplierPrequalification;

    Dictionary<int, string> _stepDictionary = new()
    {
        { 0, "initial" },
        { 1, "nda" },
        { 2, "bank" },
        { 3, "duediligence" },
        { 4, "prequalification" },
    };

    string? _currentStep => _stepDictionary[_currentPageIndex];
    bool _isFirstPage => _currentStep == _stepDictionary.FirstOrDefault().Value;
    bool _isLastPage => _currentStep == _stepDictionary.LastOrDefault().Value;

    IEnumerable<Product>? _productList { get; set; } = new List<Product>();
    IEnumerable<Country>? _countryList { get; set; } = new List<Country>();
    IEnumerable<Analysis>? _paymentTermsList { get; set; } = new List<Analysis>();
    IEnumerable<PrequalificationCategory>? _prequalificationCategoryList { get; set; } = new List<PrequalificationCategory>();
    IEnumerable<Currency>? _currencyList = new List<Currency>();
    IEnumerable<DueDiligenceDesign>? _dueDiligenceDesignList = new List<DueDiligenceDesign>();

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    async Task LoadData()
    {
        AppState.Loading = true;
        _productList = await ProductService.GetAll();
        _countryList = await CountryService.GetAll();
        _paymentTermsList = await AnalysisService.GetPaymentTerms();
        _prequalificationCategoryList = await PrequalificationCategoryService.GetAll();
        _currencyList = await CurrencyService.GetAll();
        _dueDiligenceDesignList = await DueDiligenceDesignService.GetAllAsync();
        var currentVendor = await VendorService.GetByUserIdOrTaxIdAsync();
        if (currentVendor != null) { SetModelNewInstance(currentVendor); }
        SetNewPersonInstance();
        SetDueDiligenceValues();
        AppState.Loading = false;
    }

    void SetDueDiligenceValues()
    {
        _currentVendor ??= new();
        if (_dueDiligenceDesignList != null && _dueDiligenceDesignList.Any())
        {
            var dueDiligenceDesignList = _dueDiligenceDesignList.ToList();
            _currentVendor.DueDiligenceList ??= new();
            foreach (var item in _dueDiligenceDesignList)
            {
                if (!_currentVendor.DueDiligenceList.Select(e => e.DueDiligenceDesignId).Contains(item.DueDiligenceDesignId))
                {
                    _currentVendor.DueDiligenceList.Add(new DueDiligence { DueDiligenceDesignId = item.DueDiligenceDesignId, VendorId = _currentVendor.VendorId });
                }
            }

            var design01Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 1);
            var design02Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 2);
            var design03Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 3);
            var design04Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 4);
            var design05Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 5);
            var design06Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 6);
            var design07Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 7);
            var design08Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 8);

            var design01Id = design01Index > -1 ? dueDiligenceDesignList[design01Index].DueDiligenceDesignId : 0;
            var design02Id = design02Index > -1 ? dueDiligenceDesignList[design02Index].DueDiligenceDesignId : 0;
            var design03Id = design03Index > -1 ? dueDiligenceDesignList[design03Index].DueDiligenceDesignId : 0;
            var design04Id = design04Index > -1 ? dueDiligenceDesignList[design04Index].DueDiligenceDesignId : 0;
            var design05Id = design05Index > -1 ? dueDiligenceDesignList[design05Index].DueDiligenceDesignId : 0;
            var design06Id = design06Index > -1 ? dueDiligenceDesignList[design06Index].DueDiligenceDesignId : 0;
            var design07Id = design07Index > -1 ? dueDiligenceDesignList[design07Index].DueDiligenceDesignId : 0;
            var design08Id = design08Index > -1 ? dueDiligenceDesignList[design08Index].DueDiligenceDesignId : 0;

            if (_currentVendor.DueDiligenceList.Any())
            {
                var line01Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design01Id);
                var line02Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design02Id);
                var line03Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design03Id);
                var line04Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design04Id);
                var line05Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design05Id);
                var line06Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design06Id);
                var line07Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design07Id);
                var line08Index = _currentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design08Id);

                if (line01Index > -1)
                {
                    _currentVendor.DueDiligenceList[line01Index].TextboxValue = _currentVendor.VendorName;
                }

                if (line02Index > -1)
                {
                    _currentVendor.DueDiligenceList[line02Index].TextboxValue = _currentVendor.CompanyWebsite;
                }

                if (line03Index > -1)
                {
                    _currentVendor.DueDiligenceList[line03Index].TextboxValue = _currentVendor.CountryCode;
                    _currentVendor.DueDiligenceList[line03Index].DateTimeValue = _currentVendor.CompanyRegistrationDate;
                }

                if (line04Index > -1)
                {
                    _currentVendor.DueDiligenceList[line04Index].TextboxValue = _currentVendor.CompanyLocation;
                }

                if (line05Index > -1)
                {
                    _currentVendor.DueDiligenceList[line05Index].TextboxValue = _currentVendor.TaxId;
                }

                if (line06Index > -1)
                {
                    _currentVendor.DueDiligenceList[line06Index].TextboxValue = _currentVendor.TaxId;
                }

                if (line07Index > -1)
                {
                    _currentVendor.DueDiligenceList[line07Index].TextareaValue = _currentVendor.CompanyAddress;
                }

                if (line08Index > -1)
                {
                    _currentVendor.DueDiligenceList[line08Index].BankList = _currentVendor.BankList;
                }
            }
        }
    }

    void SetNewPersonInstance()
    {
        _currentPerson.Email = SessionData.CurrentUser.Email;
        _currentPerson.UserName = SessionData.CurrentUser.UserName;
        _currentPerson.FullName = SessionData.CurrentUser.FullName;
        _currentPerson.Position = SessionData.CurrentUser.Position;
        _currentPerson.PhoneNumber = SessionData.CurrentUser.PhoneNumber;
    }

    void SetModelNewInstance(Vendor vendor)
    {
        _currentVendor.VendorId = vendor.VendorId;
        _currentVendor.BusinessUnitId = vendor.BusinessUnitId;
        _currentVendor.VendorCode = vendor.VendorCode;
        _currentVendor.VendorName = vendor.VendorName;
        _currentVendor.CompanyAddress = vendor.CompanyAddress;
        _currentVendor.CompanyRegistrationDate = vendor.CompanyRegistrationDate;
        _currentVendor.PrequalificationCategoryIdList = vendor.PrequalificationCategoryIdList;
        _currentVendor.PrequalificationCategoryList = vendor.PrequalificationCategoryList;
        _currentVendor.TaxId = vendor.TaxId;
        _currentVendor.CompanyLocation = vendor.CompanyLocation;
        _currentVendor.CompanyWebsite = vendor.CompanyWebsite;
        _currentVendor.CompanyLogo = vendor.CompanyLogo;
        _currentVendor.OfficialLetter = vendor.OfficialLetter;
        _currentVendor.CreditDays = vendor.CreditDays;
        _currentVendor.PaymentTermsCode = vendor.PaymentTermsCode;
        _currentVendor.CountryCode = vendor.CountryCode;
        _currentVendor.PaymentTerms = vendor.PaymentTerms;
        _currentVendor.ProvidedProductIdList = vendor.ProvidedProductIdList;
        _currentVendor.ProvidedProductList = vendor.ProvidedProductList;
        _currentVendor.BankList = vendor.BankList;
        _currentVendor.OtherProducts = vendor.OtherProducts;
        _currentVendor.RepresentedProductList = vendor.RepresentedProductList;
        _currentVendor.RepresentedCompanyList = vendor.RepresentedCompanyList;
        _currentVendor.AgreeWithDefaultDays = vendor.AgreeWithDefaultDays;
        _currentVendor.Exists = vendor.Exists;
        _currentVendor.StatusId = vendor.StatusId;

        _currentVendor.DueDiligenceList = vendor.DueDiligenceList;
    }

    void OnAppStateInitialized()
    {
        if (AppState == null) return;
        AppState.SetDefaults();
        AppState.CustomButton04Icon = "check";
        AppState.CustomButton04Title = "Submit";
        AppState.CustomButton04Visible = true;
        AppState.BackButtonVisible = true;
        AppState.NextButtonVisible = true;
        AppState.AddButtonVisible = true;
        AppState.SaveButtonVisible = true;
        SetButtonsAbility();
        AppState.OnBackClick += BackClickHandler;
        AppState.OnNextClick += NextClickHandler;
        AppState.OnAddClick += AddBankClickHandler;
        AppState.OnSaveClick += SaveClickHandler;
        AppState.OnCustomButton04Click += SubmitClickHandler;
    }

    void IDisposable.Dispose()
    {
        if (AppState == null) return;
        AppState.OnBackClick -= BackClickHandler;
        AppState.OnNextClick -= NextClickHandler;
        AppState.OnAddClick -= AddBankClickHandler;
        AppState.OnSaveClick -= SaveClickHandler;
        AppState.OnCustomButton04Click -= SubmitClickHandler;
    }

    async void BackClickHandler()
    {
        var isValid = await Validate();
        if (isValid)
        {
            _currentPageIndex -= 1;
        }
        SetButtonsAbility();
    }

    async void NextClickHandler()
    {
        var isValid = await Validate();
        if (isValid)
        {
            _currentPageIndex += 1;
        }
        SetButtonsAbility();
    }

    void SetButtonsAbility()
    {
        if (_currentStep == "initial")
        {
            if (AppState == null) return;
            AppState.AddButtonVisible = false;
            AppState.SaveButtonVisible = false;
            AppState.CustomButton04Visible = false;
        }
        else if (_currentStep == "bank")
        {
            if (AppState == null) return;
            AppState.AddButtonVisible = true;
            AppState.SaveButtonVisible = false;
            AppState.CustomButton04Visible = false;
        }
        else if (_currentStep == "nda")
        {
            if (AppState == null) return;
            AppState.AddButtonVisible = false;
            AppState.SaveButtonVisible = false;
            AppState.CustomButton04Visible = false;
        }
        else if (_currentStep == "prequalification")
        {
            if (AppState == null) return;
            AppState.AddButtonVisible = false;
            AppState.SaveButtonVisible = true;
            AppState.CustomButton04Visible = true;
        }
        else if (_currentStep == "duediligence")
        {
            if (AppState == null) return;
            AppState.AddButtonVisible = false;
            AppState.SaveButtonVisible = false;
            AppState.CustomButton04Visible = false;
        }
        else
        {
            if (AppState == null) return;
            AppState.AddButtonVisible = false;
            AppState.SaveButtonVisible = false;
            AppState.CustomButton04Visible = false;
        }
        AppState.BackButtonEnabled = !_isFirstPage;
        AppState.NextButtonEnabled = !_isLastPage;
        AppState?.Refresh();
    }

    async void SaveClickHandler()
    {
        await RegisterSupplier(true);
    }

    async void SubmitClickHandler()
    {
        await RegisterSupplier(false);
    }

    async Task RegisterSupplier(bool justSave)
    {
        var isValid = await Validate();
        if (AppState != null && isValid)
        {
            AppState.Loading = true;
            var sqlResult = justSave ? await VendorService.SaveSupplier(_currentVendor, _currentPerson, _deletedAttachmentIdList) : await VendorService.RegisterSupplier(_currentVendor, _currentPerson, _deletedAttachmentIdList);
            if (sqlResult != null && sqlResult.QueryResultMessage == null)
            {
                if (!justSave) { SessionData.CurrentUser = await AppUserService.GetCurrentUserAsync(); }
                NavigationManager.NavigateTo("/", true);
            }
            else if (sqlResult != null && sqlResult.QueryResultMessage != null)
            {
                AppState.ShowAlert(sqlResult.QueryResultMessage, Severity.Error);
            }
            AppState.Loading = false;
        }
    }

    async Task CurrentPageIndexChangeHandler(int currentPageIndex)
    {
        //var isValid = await Validate();
        //if (isValid)
        //{
        //    _currentPageIndex = currentPageIndex;
        //}
        //SetButtonsAbility();
    }

    async Task<bool> Validate()
    {
        if (_currentStep == "initial")
        {
            return await _registerSupplierInitial.Validate();
        }
        else if (_currentStep == "nda")
        {
            return await _registerSupplierNda.Validate();
        }
        else if (_currentStep == "bank")
        {
            return await _registerSupplierBank.Validate();
        }
        else if (_currentStep == "duediligence")
        {
            return await _registerSupplierDueDiligence.Validate();
        }
        else if (_currentStep == "prequalification")
        {
            return await _registerSupplierPrequalification.Validate();
        }
        else
        {
            return false;
        }
    }

    void AddBankClickHandler()
    {
        _registerSupplierBank.AddBank();
    }
}


<style>
    .k-form-horizontal .k-form-field > .k-form-label {
        width: 40%;
    }

    .k-form-horizontal .k-form-field-wrap {
        max-width: calc(60% - 10px);
    }

    .k-radio-list-horizontal, .k-radio-list.k-list-horizontal {
        gap: 24px;
    }

    .expiration-date-picker {
        max-width: 120px;
    }

    .unsatisfactory {
        color: #5f071c;
        background-color: #fbd0da;
    }

    .adequate {
        color: #4b1d17;
        background-color: #f1dbd8;
    }

    .satisfactory {
        color: #363312;
        background-color: #e7e6d5;
    }

    .good {
        color: #22490c;
        background-color: #dcf0d3;
    }

    .excellent {
        color: #0d5f07;
        background-color: #d2fbd0;
    }
</style>