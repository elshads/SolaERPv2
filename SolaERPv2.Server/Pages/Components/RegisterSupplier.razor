<MudCard Class="k-p-2 k-mb-8">
    <TelerikStepper Value="@CurrentPageIndex" ValueChanged="CurrentPageIndexChangeHandler">
        <StepperSteps>
            <StepperStep Icon="home" Label="Company Info"></StepperStep>
            <StepperStep Icon="dollar" Label="Bank Details"></StepperStep>
            <StepperStep Icon="paste-plain-text" Label="Evaluation Form"></StepperStep>
        </StepperSteps>
    </TelerikStepper>
</MudCard>

@if (CurrentPageIndex == 0)
{
    <RegisterSupplierInitial @ref="@registerSupplierInitial"
                         CurrentPerson="@CurrentPerson"
                         CurrentPersonChanged="@CurrentPersonChangedHandler"
                         CurrentVendor="@CurrentVendor"
                         CurrentVendorChanged="@CurrentVendorChangedHandler" />
}
else if (CurrentPageIndex == 1)
{
    <RegisterSupplierBank @ref="@registerSupplierBank"
                      CurrentVendor="@CurrentVendor"
                      CurrentVendorChanged="@CurrentVendorChangedHandler" />
}
else if (CurrentPageIndex == 2)
{
    <RegisterSupplierFinal @ref="@registerSupplierFinal"
                       CurrentVendor="@CurrentVendor"
                       CurrentVendorChanged="@CurrentVendorChangedHandler" />
}
else
{
    <div>Supplier Registration - Empty Page (contact developers)</div>
}

@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    [Parameter] public AppUser? CurrentPerson { get; set; }
    [Parameter] public Vendor? CurrentVendor { get; set; }
    [Parameter] public int CurrentPageIndex { get; set; } = 0;
    [Parameter] public EventCallback<AppUser> CurrentPersonChanged { get; set; }
    [Parameter] public EventCallback<Vendor> CurrentVendorChanged { get; set; }
    [Parameter] public EventCallback<int> CurrentPageIndexChanged { get; set; }


    RegisterSupplierInitial? registerSupplierInitial;
    RegisterSupplierBank? registerSupplierBank;
    RegisterSupplierFinal? registerSupplierFinal;

    public async Task<bool> NextClickValid()
    {
        if (CurrentPageIndex == 0)
        {
            return registerSupplierInitial != null ? await registerSupplierInitial.NextClickValid() : false;
        }
        else if (CurrentPageIndex == 1)
        {
            return registerSupplierBank != null ? await registerSupplierBank.NextClickValid() : false;
        }
        return false;
    }

    public async Task<bool> SaveValid()
    {
        return registerSupplierFinal != null ? await registerSupplierFinal.SaveValid() : false;
    }

    public void AddClickHandler()
    {
        registerSupplierBank?.AddBank();
    }

    async Task CurrentPersonChangedHandler(AppUser currentPerson)
    {
        CurrentPerson = currentPerson;
        await CurrentPersonChanged.InvokeAsync(CurrentPerson);
    }

    async Task CurrentVendorChangedHandler(Vendor currentVendor)
    {
        CurrentVendor = currentVendor;
        await CurrentVendorChanged.InvokeAsync(CurrentVendor);
    }

    async Task CurrentPageIndexChangeHandler(int currentPageIndex)
    {
        if (currentPageIndex == 2 && CurrentPageIndex == 0)
        {
            var page0Valid = registerSupplierInitial != null ? await registerSupplierInitial.NextClickValid() : false;
            var page1Valid = registerSupplierBank != null ? await registerSupplierBank.NextClickValid() : false;
            if (page0Valid && page1Valid)
            {
                CurrentPageIndex = currentPageIndex;
                await CurrentPageIndexChanged.InvokeAsync(CurrentPageIndex);
            }
        }
        else if (currentPageIndex > CurrentPageIndex)
        {
            var isValid = await NextClickValid();
            if (isValid)
            {
                CurrentPageIndex = currentPageIndex;
                await CurrentPageIndexChanged.InvokeAsync(CurrentPageIndex);
            }
        }
        else
        {
            CurrentPageIndex = currentPageIndex;
            await CurrentPageIndexChanged.InvokeAsync(CurrentPageIndex);
        }
    }
}
