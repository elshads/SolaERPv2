<MudCard Class="k-p-8" Style="max-width:1280px; margin:auto">
    <h3 class="k-mb-4">CONFIDENTIALITY AGREEMENT</h3>

    <TelerikGrid Data=@BusinessUnitList
                 SelectionMode="GridSelectionMode.Multiple"
                 Navigable="true"
                 Resizable="true"
                 Width="400px"
                 Class="mb-4"
                 SelectedItems="@_currentVendorBusinessUnitList"
                 SelectedItemsChanged="@((IEnumerable<BusinessUnit> selectedItems) => BusinessUnitListChanged(selectedItems))">
        <GridColumns>
            <GridCheckboxColumn></GridCheckboxColumn>
            <GridColumn Field="@nameof(BusinessUnit.BusinessUnitName)" Title="Select applicable Business Unit(s)" />
        </GridColumns>
    </TelerikGrid>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        @if (CurrentVendor != null && CurrentVendor.BusinessUnitList != null)
        {
            @foreach (var businessUnit in CurrentVendor.BusinessUnitList)
            {
                <MudTabPanel Text="@businessUnit.BusinessUnitName">
                    <RegisterSupplierAgreement BusinessUnit="@businessUnit"
                                       BusinessUnitChanged="@BusinessUnitChangedHandler"
                                       CurrentVendor="@CurrentVendor"
                                       CurrentPerson="@CurrentPerson" />
                </MudTabPanel>
            }
        }
    </MudTabs>
</MudCard>


@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    [Parameter] public AppUser? CurrentPerson { get; set; } = new();
    [Parameter] public EventCallback<AppUser> CurrentPersonChanged { get; set; }
    [Parameter] public Vendor? CurrentVendor { get; set; } = new();
    [Parameter] public EventCallback<Vendor> CurrentVendorChanged { get; set; }
    [Parameter] public List<int> DeletedAttachmentIdList { get; set; } = new();
    [Parameter] public EventCallback<List<int>> DeletedAttachmentIdListChanged { get; set; }
    [Parameter] public IEnumerable<BusinessUnit>? BusinessUnitList { get; set; } = new List<BusinessUnit>();

    IEnumerable<BusinessUnit>? _currentVendorBusinessUnitList = new List<BusinessUnit>();

    FluentValidationValidator? _ndaValidator;
    //bool _isNdaAgree = false;

    protected override void OnInitialized()
    {
        _currentVendorBusinessUnitList = CurrentVendor != null && CurrentVendor.BusinessUnitList != null ? CurrentVendor.BusinessUnitList : new List<BusinessUnit>();
    }

    public async Task<bool> Validate()
    {
        await CurrentPersonChanged.InvokeAsync(CurrentPerson);
        await CurrentVendorChanged.InvokeAsync(CurrentVendor);
        var isAgree = CurrentVendor != null && CurrentVendor.BusinessUnitList != null ? CurrentVendor.BusinessUnitList.Min(e => Convert.ToInt32(e.IsAgree)) : 0;
        if (isAgree == 0)
        {
            AppState.ShowAlert("Check an agreement to continue", Severity.Error);
        }
        return isAgree > 0;
    }

    async Task OnAttachmentDeleteHandler(List<Attachment> deletedAttachments)
    {
        var idList = deletedAttachments.Select(e => e.AttachmentId);
        DeletedAttachmentIdList.AddRange(idList);
        await DeletedAttachmentIdListChanged.InvokeAsync(DeletedAttachmentIdList);
    }

    void BusinessUnitListChanged(IEnumerable<BusinessUnit> selectedItems)
    {
        _currentVendorBusinessUnitList = selectedItems;
        CurrentVendor.BusinessUnitList = selectedItems.ToList();
    }

    void BusinessUnitChangedHandler(BusinessUnit businessUnit)
    {
        var index = CurrentVendor.BusinessUnitList.FindIndex(e => e.BusinessUnitId == businessUnit.BusinessUnitId);
        CurrentVendor.BusinessUnitList[index].IsAgree = businessUnit.IsAgree;
    }
}
