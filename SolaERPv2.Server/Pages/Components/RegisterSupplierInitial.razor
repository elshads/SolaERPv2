@inject VendorService VendorService
@inject ProductService ProductService
@inject CountryService CountryService

<MudCard Class="k-p-8" Style="max-width:600px; margin:auto">
    <div>
        <h3 class="k-mb-4">INITIAL REGISTRATION FORM</h3>

        <TelerikForm Model="@CurrentPerson" Orientation="FormOrientation.Horizontal">
            <FormValidation>
                <FluentValidationValidator @ref="personValidator" DisableAssemblyScanning="true" />
            </FormValidation>
            <FormItems>
                <FormGroup LabelText="Contact Person">
                    <FormItem LabelText="Email: " Field="@nameof(AppUser.Email)" Enabled="false" />
                    <FormItem LabelText="Full Name: " Field="@nameof(AppUser.FullName)" />
                    <FormItem LabelText="Position: " Field="@nameof(AppUser.Position)" />
                    <FormItem LabelText="Phone Number: " Field="@nameof(AppUser.PhoneNumber)" />
                </FormGroup>
                <TelerikValidationSummary />
            </FormItems>
            <FormButtons />
        </TelerikForm>

        <TelerikForm Model="@CurrentVendor" Orientation="FormOrientation.Horizontal">
            <FormValidation>
                <FluentValidationValidator @ref="vendorValidator" DisableAssemblyScanning="true" />
            </FormValidation>
            <FormItems>
                <FormGroup LabelText="Company Information">
                    <FormItem LabelText="Tax ID / VÖEN: " Field="@nameof(Vendor.TaxId)">
                        <Template>
                            <label for="taxid" class="k-label k-form-label">Tax ID / VÖEN: </label>
                            <div class="k-form-field-wrap">
                                <TelerikTextBox Id="taxid" @bind-Value="@(CurrentVendor.TaxId)" OnBlur="@(() => TaxIdBlured(CurrentVendor.TaxId))" />
                                <TelerikValidationMessage For="@(() => CurrentVendor.TaxId)" />
                            </div>
                        </Template>
                    </FormItem>
                    <FormItem LabelText="Company Name: " Field="@nameof(Vendor.VendorName)" Enabled="@(!vendorExists)" />
                    <FormItem LabelText="Country: " Field="@nameof(Vendor.CountryCode)">
                        <Template>
                            <label for="countrylist" class="k-label k-form-label">Country: </label>
                            <div class="k-form-field-wrap">
                                <TelerikComboBox Id="countrylist"
                                                 Data="@countryList"
                                                 @bind-Value="@CurrentVendor.CountryCode"
                                                 TextField="@nameof(Country.CountryName)"
                                                 ValueField="@nameof(Country.CountryCode)"
                                                 Placeholder="Select ..."
                                                 Filterable="true"
                                                 FilterOperator="StringFilterOperator.Contains"
                                                 Width="100%" />
                                <TelerikValidationMessage For="@(() => CurrentVendor.CountryCode)" />
                            </div>
                        </Template>
                    </FormItem>
                    <FormItem LabelText="Location: " Field="@nameof(Vendor.CompanyLocation)" Enabled="@(!vendorExists)" />
                    <FormItem LabelText="Website: " Field="@nameof(Vendor.CompanyWebsite)" Enabled="@(!vendorExists)" />
                    <FormItem LabelText="Products / Services provided: " Field="@nameof(Vendor.ProvidedProducts)" Enabled="@(!vendorExists)">
                        <Template>
                            <label for="productlist" class="k-label k-form-label">Products / Services provided: </label>
                            <div class="k-form-field-wrap">
                                <TelerikMultiSelect Id="productlist"
                                                    Data="@productList"
                                                    Value="@CurrentVendor?.ProvidedProducts"
                                                    ValueChanged="@((List<int> selectedList) => ProvidedProductsChanged(selectedList))"
                                                    TItem="Product"
                                                    TValue="int"
                                                    ValueExpression="@(() => CurrentVendor.ProvidedProducts)"
                                                    TextField="@nameof(Product.ProductServiceName)"
                                                    ValueField="@nameof(Product.ProductServiceId)"
                                                    Placeholder="Select ..."
                                                    Filterable="true"
                                                    FilterOperator="StringFilterOperator.Contains"
                                                    Width="100%" />
                                <TelerikValidationMessage For="@(() => CurrentVendor.ProvidedProducts)" />
                            </div>
                        </Template>
                    </FormItem>
                    @if (otherProductsVisible)
                    {
                        <FormItem LabelText="Other Products: " Field="@nameof(Vendor.OtherProducts)">
                            <Template>
                                <label for="otherproducts" class="k-label k-form-label">Other Products: </label>
                                <div class="k-form-field-wrap">
                                    <TelerikTextArea Id="otherproducts" @bind-Value="@(CurrentVendor.OtherProducts)" />
                                    <TelerikValidationMessage For="@(() => CurrentVendor.OtherProducts)" />
                                </div>
                            </Template>
                        </FormItem>
                    }
                    <FormItem LabelText="Company logo: " Field="@nameof(Vendor.CompanyLogo)" Enabled="@(!vendorExists)">
                        <Template>
                            <label for="companylogo" class="k-label k-form-label">Company logo: </label>
                            <div class="k-form-field-wrap">
                                <FileSelect HideList="true" Multiple="false" AllowedExtensions="@(new List<string> { ".png", ".jpg", ".jpeg" })" OnSelect="@OnLogoSelect" />
                                <TelerikValidationMessage For="@(() => CurrentVendor.CompanyLogo)" />
                            </div>
                        </Template>
                    </FormItem>
                    <FormItem LabelText="Represented Products: " Field="@nameof(Vendor.RepresentedProducts)" Enabled="@(!vendorExists)" />
                    <FormItem LabelText="Represented Companies: " Field="@nameof(Vendor.RepresentedCompanies)" Enabled="@(!vendorExists)" />
                    <FormItem LabelText="Payment Terms: " Field="@nameof(Vendor.PaymentTermsCode)" Enabled="@(!vendorExists)">
                        <Template>
                            <label for="paymentterms" class="k-label k-form-label">Payment Terms: </label>
                            <div class="k-form-field-wrap">
                                <GridDropDownList Data="@paymentTermsList"
                                                  Id="paymentterms"
                                                  @bind-Value="@CurrentVendor.PaymentTermsCode"
                                                  TextField="@nameof(Analysis.AnalysisCode)"
                                                  ValueField="@nameof(Analysis.AnalysisCode)"
                                                  SearchFields="@(new List<string>() {"AnalysisCode", "AnalysisName"})"
                                                  HeaderNames="@(new List<string>() {"Code", "Name"})" />
                                <label class="k-form-hint">@paymentTermsName</label>
                                <TelerikValidationMessage For="@(() => CurrentVendor.PaymentTermsCode)" />
                            </div>
                        </Template>
                    </FormItem>
                    <FormItem LabelText="Credit Days: " Field="@nameof(Vendor.CreditDays)" Enabled="@(CurrentVendor != null && !vendorExists && !CurrentVendor.AgreeWithDefaultDays)">
                        <Template>
                            <label for="creditdays" class="k-label k-form-label">Credit Days: </label>
                            <div class="k-form-field-wrap">
                                <TelerikNumericTextBox Id="creditdays" T="int" Min="0" @bind-Value="@(CurrentVendor.CreditDays)" />
                                <TelerikValidationMessage For="@(() => CurrentVendor.CreditDays)" />
                            </div>
                        </Template>
                    </FormItem>
                    <FormItem LabelText="Please confirm that you agree with the 60-days payment" Field="@nameof(Vendor.AgreeWithDefaultDays)" Class="k-pb-4" Enabled="@(!vendorExists)">
                        <Template>
                            <label for="agreement" class="k-label k-form-label">Please confirm that you agree with the 60-days payment </label>
                            <div class="k-form-field-wrap">
                                <TelerikRadioGroup Id="agreement"
                                                   Data="@BooleanModel.BooleanModelList"
                                                   Value="@CurrentVendor.AgreeWithDefaultDays"
                                                   ValueChanged="@((bool isAgree) => AgreeWithDefaultDaysChanged(isAgree))"
                                                   ValueExpression="@(() => CurrentVendor.AgreeWithDefaultDays)"
                                                   TextField="Name"
                                                   ValueField="Value" />
                            </div>
                        </Template>
                    </FormItem>
                </FormGroup>
                <TelerikValidationSummary />
            </FormItems>
            <FormButtons />
        </TelerikForm>
    </div>
</MudCard>


@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    [Parameter] public AppUser? CurrentPerson { get; set; }
    [Parameter] public Vendor? CurrentVendor { get; set; }
    [Parameter] public EventCallback<AppUser> CurrentPersonChanged { get; set; }
    [Parameter] public EventCallback<Vendor> CurrentVendorChanged { get; set; }

    FluentValidationValidator? personValidator;
    FluentValidationValidator? vendorValidator;

    IEnumerable<Product>? productList = new List<Product>();
    IEnumerable<Country>? countryList = new List<Country>();
    IEnumerable<Analysis>? paymentTermsList = new List<Analysis>();


    bool vendorExists = false;
    bool otherProductsVisible = false;
    string? paymentTermsName => paymentTermsList?.FirstOrDefault(e => e.AnalysisCode == CurrentVendor?.PaymentTermsCode)?.AnalysisName;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override void OnParametersSet()
    {
        SetOtherProductsVisibility();
    }

    async Task LoadData()
    {
        productList = await ProductService.GetAll();
        countryList = await CountryService.GetAll();
        paymentTermsList = await AnalysisService.GetPaymentTerms();
    }

    void ProvidedProductsChanged(List<int> selectedList)
    {
        if (CurrentVendor != null)
        {
            CurrentVendor.ProvidedProducts = selectedList;
            SetOtherProductsVisibility();
        }
    }

    void SetOtherProductsVisibility()
    {
        if (CurrentVendor != null && CurrentVendor.ProvidedProducts != null && productList != null)
        {
            var otherId = 0;
            var otherProduct = productList.FirstOrDefault(e => e.Other == 1);
            if (otherProduct != null) { otherId = otherProduct.ProductServiceId; }
            otherProductsVisible = CurrentVendor.ProvidedProducts.Contains(otherId);
            if (!otherProductsVisible) { CurrentVendor.OtherProducts = null; }
        }
    }

    void AgreeWithDefaultDaysChanged(bool isAgree)
    {
        if (CurrentVendor != null)
        {
            CurrentVendor.AgreeWithDefaultDays = isAgree;
            if (isAgree) { CurrentVendor.CreditDays = 60; }
        }
    }

    async Task TaxIdBlured(string taxId)
    {
        Vendor? vendor = new();
        if (CurrentVendor != null && CurrentVendor.TaxId != null) { vendor = await VendorService.GetByTaxIdAsync(CurrentVendor.TaxId); }
        if (vendor != null && vendor.TaxId != null && vendor.TaxId.Length > 0)
        {
            CurrentVendor = vendor;
            vendorExists = true;
        }
        else
        {
            vendorExists = false;
        }
    }

    void OnLogoSelect(List<Attachment> files)
    {
        if (CurrentVendor != null && files != null && files.Any())
        {
            CurrentVendor.CompanyLogo = files?.FirstOrDefault()?.FileData;
        }
        else
        {
            AppState?.ShowAlert("List is NULL", Severity.Warning);
        }
    }

    public async Task<bool> NextClickValid()
    {
        var valid = ValidatePerson() && ValidateVendor();
        if (!valid)
        {
            AppState?.ShowAlert("Validation error", Severity.Error);
        }
        await CurrentPersonChanged.InvokeAsync(CurrentPerson);
        await CurrentVendorChanged.InvokeAsync(CurrentVendor);
        return valid;
    }

    bool ValidatePerson()
    {
        if (personValidator != null) { return personValidator.Validate(options => options.IncludeRuleSets(nameof(AppUser.FullName))); }
        return false;
    }

    bool ValidateVendor()
    {
        if (vendorValidator != null) { return vendorValidator.Validate(options => options.IncludeAllRuleSets()); }
        return false;
    }
}

<style>
    .k-form-horizontal .k-form-field > .k-form-label {
        width: 30%;
    }

    .k-form-horizontal .k-form-field-wrap {
        max-width: calc(70% - 10px);
    }
</style>