
<MudCard Class="k-p-8" Style="max-width:1280px; margin:auto">
    <h3 class="k-mb-4">DUE DILIGENCE FORM</h3>

    <MudGrid Spacing="1">
        <MudItem xs="12" md="4"></MudItem>
        <MudItem xs="12" md="8">
            <MudGrid Spacing="1">
                <MudItem xs="12" md="8"></MudItem>
                <MudItem xs="12" md="4">
                    <MudGrid Spacing="1">
                        <MudItem xs="4"><div class="pr-2 scoring-title"></div></MudItem>
                        <MudItem xs="4"><div class="pr-2 scoring-title"></div></MudItem>
                        <MudItem xs="4">
                            <div class="pr-2">
                                <TelerikNumericTextBox Class="@_outcomeStyle" Value="@_totalOutcome" ValueExpression="() => _totalOutcome" Arrows="false" Enabled=false />
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="1">
        <MudItem xs="12" md="4"></MudItem>
        <MudItem xs="12" md="8">
            <MudGrid Spacing="1">
                <MudItem xs="12" md="8"></MudItem>
                <MudItem xs="12" md="4">
                    <MudGrid Spacing="1" Class="scoring-values">
                        <MudItem xs="4"><div class="pr-2 scoring-title">Scoring</div></MudItem>
                        <MudItem xs="4"><div class="pr-2 scoring-title">Weight</div></MudItem>
                        <MudItem xs="4"><div class="pr-2 scoring-title">Outcome</div></MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>


    <TelerikForm Model="@CurrentVendor?.DueDiligenceList" Orientation="FormOrientation.Horizontal">
        <FormValidation>
            <FluentValidationValidator @ref="_dueDiligenceValidator" DisableAssemblyScanning="true" />
        </FormValidation>
        <FormItems>
            @foreach (var group in _dueDiligenceGroupList)
            {
                <FormGroup LabelText="@group">
                    @foreach (var design in DueDiligenceDesignList)
                    {
                        var currentGroup = DueDiligenceDesignList?.FirstOrDefault(e => design.Title == group);
                        var currentDueDiligence = CurrentVendor?.DueDiligenceList?.FirstOrDefault(e => e.DueDiligenceDesignId == design.DueDiligenceDesignId);
                        @if (currentGroup != null)
                        {
                            <FormItem>
                                <Template>
                                    <MudGrid Spacing="1">
                                        <MudItem xs="12" md="4">
                                            <label class="pt-1 mr-4">@design.Label</label>
                                        </MudItem>
                                        <MudItem xs="12" md="8">
                                            <MudGrid Spacing="1">
                                                <MudItem xs="12" md="8">
                                                    @if (currentDueDiligence != null)
                                                    {
                                                        <div class="d-flex flex-nowrap">
                                                            @if (design.HasRadiobox)
                                                            {
                                                                <TelerikRadioGroup Class="mr-4 radio-value" Data="@_radioSelectionList"
                                                               @bind-Value="@currentDueDiligence.RadioboxValue"
                                                               Layout="RadioGroupLayout.Horizontal"
                                                               ValueField="Value"
                                                               TextField="Text"
                                                               OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                               Enabled="!_disabledLines.Contains(design.LineNo)" />
                                                            }
                                                            @if (design.HasCheckbox)
                                                            {
                                                                <TelerikCheckBox OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                             Enabled="!_disabledLines.Contains(design.LineNo)"
                                                             Class="mr-4" @bind-Value="@currentDueDiligence.CheckboxValue" />
                                                            }
                                                            @if (design.HasInt)
                                                            {
                                                                <TelerikNumericTextBox OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                                   Enabled="!_disabledLines.Contains(design.LineNo)"
                                                                   Class="mr-4" @bind-Value="currentDueDiligence.IntValue"
                                                                   Arrows="false" />
                                                            }
                                                            @if (design.HasDecimal)
                                                            {
                                                                <TelerikNumericTextBox OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                                   Enabled="!_disabledLines.Contains(design.LineNo)"
                                                                   Class="mr-4" @bind-Value="currentDueDiligence.DecimalValue"
                                                                   Arrows="false" />
                                                            }
                                                            @if (design.HasTextbox)
                                                            {
                                                                <TelerikTextBox OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                            Enabled="!_disabledLines.Contains(design.LineNo)"
                                                            Class="mr-4" @bind-Value="@currentDueDiligence.TextboxValue" />
                                                            }
                                                            @if (design.HasTextarea)
                                                            {
                                                                <TelerikTextArea Enabled="!_disabledLines.Contains(design.LineNo)" Class="mr-4" @bind-Value="@currentDueDiligence.TextareaValue" />
                                                            }
                                                            @if (design.HasDateTime)
                                                            {
                                                                <TelerikDatePicker OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                               Enabled="!_disabledLines.Contains(design.LineNo)"
                                                               Class="mr-4" @bind-Value="@currentDueDiligence.DateTimeValue" />
                                                            }
                                                            @if (design.HasBankList)
                                                            {
                                                                @if (CurrentVendor != null && CurrentVendor.BankList != null)
                                                                {
                                                                    <span class="mr-4 pt-1" style="white-space: nowrap;">
                                                                        Bank accounts: @CurrentVendor.BankList.Count()
                                                                    </span>
                                                                }
                                                                else
                                                                {
                                                                    <span class="mr-4 pt-1" style="white-space: nowrap;">
                                                                        Bank accounts: 0
                                                                    </span>
                                                                }
                                                                <TelerikDropDownList Data="@CurrentVendor.BankList"
                                                                 Enabled="!_disabledLines.Contains(design.LineNo)"
                                                                 @bind-Value="@_selectedBankAccount"
                                                                 TItem="Bank"
                                                                 TValue="string"
                                                                 Class="mr-4"
                                                                 OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))"
                                                                 TextField="@nameof(Bank.BankAccountNumber)"
                                                                 ValueField="@nameof(Bank.BankAccountNumber)" />
                                                            }
                                                            @if (design.HasAttachment)
                                                            {
                                                                <div class="mr-4">
                                                                    <AttachmentDialog @bind-AttachmentList="@currentDueDiligence.AttachmentValue"
                                                                  OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))" />
                                                                </div>
                                                            }
                                                            @if (design.HasGrid)
                                                            {
                                                                <div class="mr-4">
                                                                    <GridButton @bind-GridValue="@currentDueDiligence.GridValue"
                                                            ButtonName="DataGrid"
                                                            GridColumnLimit="@design.GridColumnCount"
                                                            GridRowLimit="@design.GridRowLimit"
                                                            Column1="@design.Column1Alias"
                                                            Column2="@design.Column2Alias"
                                                            Column3="@design.Column3Alias"
                                                            Column4="@design.Column4Alias"
                                                            Column5="@design.Column5Alias"
                                                            OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))" />
                                                                </div>
                                                            }
                                                            @if (design.HasAgreement)
                                                            {
                                                                <div class="mr-4">
                                                                    <AgreementButton AgreementHtmlText="@design.AgreementText"
                                                                 OnChange="@((object value) => OnValueChange(value, currentDueDiligence, design))" 
                                                                 @bind-AgreementValue="@currentDueDiligence.AgreementValue" />
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudGrid Spacing="1" Class="scoring-values">
                                                        @if (currentDueDiligence != null)
                                                        {
                                                            <MudItem xs="4">
                                                                <TelerikNumericTextBox Class="scoring" @bind-Value="currentDueDiligence.Scoring" OnChange="@(() => StateHasChanged())" Arrows="false" Min="0" Max="100" Enabled=false />
                                                            </MudItem>
                                                            <MudItem xs="4">
                                                                <span class="k-numerictextbox k-input weight k-disabled  k-valid telerik-blazor k-input-solid k-rounded-md k-input-md weight">
                                                                    <input class="k-input-inner" value="@((decimal)design.Weight / 10)%" readonly />
                                                                </span>
                                                            </MudItem>
                                                            <MudItem xs="4">
                                                                <TelerikNumericTextBox Class="outcome" Value="currentDueDiligence.Outcome" ValueExpression="() => currentDueDiligence.Outcome" Arrows="false" Enabled=false />
                                                            </MudItem>
                                                        }
                                                    </MudGrid>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                    </MudGrid>
                                </Template>
                            </FormItem>
                        }
                    }
                </FormGroup>
            }
        </FormItems>
        <FormButtons />
    </TelerikForm>
</MudCard>


@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    [Parameter] public AppUser? CurrentPerson { get; set; } = new();
    [Parameter] public EventCallback<AppUser> CurrentPersonChanged { get; set; }
    [Parameter] public Vendor? CurrentVendor { get; set; } = new();
    [Parameter] public EventCallback<Vendor> CurrentVendorChanged { get; set; }
    [Parameter] public List<int>? DeletedAttachmentIdList { get; set; } = new();
    [Parameter] public EventCallback<List<int>> DeletedAttachmentIdListChanged { get; set; }
    [Parameter] public IEnumerable<DueDiligenceDesign>? DueDiligenceDesignList { get; set; } = new List<DueDiligenceDesign>();

    FluentValidationValidator? _dueDiligenceValidator;
    decimal _totalOutcome => CurrentVendor.DueDiligenceList.Sum(e => e.Outcome);

    string _outcomeStyle => "total-outcome " + (_totalOutcome >= 95m ? "excellent" : _totalOutcome >= 75m ? "good" : _totalOutcome >= 60m ? "satisfactory" : _totalOutcome >= 50m ? "adequate" : "unsatisfactory");

    List<RadioSelection> _radioSelectionList = new() { new RadioSelection { Value = false, Text = "No" }, new RadioSelection { Value = true, Text = "Yes" } };
    IEnumerable<string>? _dueDiligenceGroupList => DueDiligenceDesignList != null ? DueDiligenceDesignList?.Select(e => e.Title)?.Distinct() : new List<string>();

    string _selectedBankAccount = "";
    List<int> _disabledLines = new() { 1, 2, 3, 4, 5, 6, 7 };
    decimal _totalWeight => DueDiligenceDesignList != null ? DueDiligenceDesignList.Sum(e => e.Weight) : 0;

    protected override void OnInitialized()
    {
        _selectedBankAccount = CurrentVendor != null && CurrentVendor.BankList != null && CurrentVendor.BankList.Any() ? CurrentVendor.BankList.FirstOrDefault().BankAccountNumber : "";
        SetDueDiligenceValues();
        @foreach (var design in DueDiligenceDesignList)
        {
            var currentDueDiligence = CurrentVendor?.DueDiligenceList?.FirstOrDefault(e => e.DueDiligenceDesignId == design.DueDiligenceDesignId);
            if (currentDueDiligence != null)
            {
                OnValueChange(1, currentDueDiligence, design);
            }
        }
    }

    void SetDueDiligenceValues()
    {
        if (DueDiligenceDesignList != null && DueDiligenceDesignList.Any())
        {
            var dueDiligenceDesignList = DueDiligenceDesignList.ToList();

            var design01Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 1);
            var design02Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 2);
            var design03Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 3);
            var design04Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 4);
            var design05Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 5);
            var design06Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 6);
            var design07Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 7);
            var design08Index = dueDiligenceDesignList.FindIndex(e => e.LineNo == 8);

            var design01Id = design01Index > -1 ? dueDiligenceDesignList[design01Index].DueDiligenceDesignId : 0;
            var design02Id = design02Index > -1 ? dueDiligenceDesignList[design02Index].DueDiligenceDesignId : 0;
            var design03Id = design03Index > -1 ? dueDiligenceDesignList[design03Index].DueDiligenceDesignId : 0;
            var design04Id = design04Index > -1 ? dueDiligenceDesignList[design04Index].DueDiligenceDesignId : 0;
            var design05Id = design05Index > -1 ? dueDiligenceDesignList[design05Index].DueDiligenceDesignId : 0;
            var design06Id = design06Index > -1 ? dueDiligenceDesignList[design06Index].DueDiligenceDesignId : 0;
            var design07Id = design07Index > -1 ? dueDiligenceDesignList[design07Index].DueDiligenceDesignId : 0;
            var design08Id = design08Index > -1 ? dueDiligenceDesignList[design08Index].DueDiligenceDesignId : 0;

            if (CurrentVendor.DueDiligenceList.Any())
            {
                var line01Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design01Id);
                var line02Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design02Id);
                var line03Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design03Id);
                var line04Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design04Id);
                var line05Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design05Id);
                var line06Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design06Id);
                var line07Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design07Id);
                var line08Index = CurrentVendor.DueDiligenceList.FindIndex(e => e.DueDiligenceDesignId == design08Id);

                if (line01Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line01Index].TextboxValue = CurrentVendor.VendorName;
                }

                if (line02Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line02Index].TextboxValue = CurrentVendor.CompanyWebsite;
                }

                if (line03Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line03Index].TextboxValue = CurrentVendor.CountryCode;
                    CurrentVendor.DueDiligenceList[line03Index].DateTimeValue = CurrentVendor.CompanyRegistrationDate;
                }

                if (line04Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line04Index].TextboxValue = CurrentVendor.CompanyLocation;
                }

                if (line05Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line05Index].TextboxValue = CurrentVendor.TaxId;
                }

                if (line06Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line06Index].TextboxValue = CurrentVendor.TaxOffice;
                }

                if (line07Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line07Index].TextareaValue = CurrentVendor.CompanyAddress;
                }

                if (line08Index > -1)
                {
                    CurrentVendor.DueDiligenceList[line08Index].BankList = CurrentVendor.BankList;
                }
            }
        }
    }

    public async Task<bool> Validate()
    {
        await CurrentPersonChanged.InvokeAsync(CurrentPerson);
        await CurrentVendorChanged.InvokeAsync(CurrentVendor);
        //evaluate and return
        return true;
    }

    async Task OnAttachmentDeleteHandler(List<Attachment> deletedAttachments)
    {
        var idList = deletedAttachments.Select(e => e.AttachmentId);
        DeletedAttachmentIdList?.AddRange(idList);
        await DeletedAttachmentIdListChanged.InvokeAsync(DeletedAttachmentIdList);
    }

    void OnValueChange(object value, DueDiligence item, DueDiligenceDesign design)
    {
        var numberOfComponents = Convert.ToInt32(design.HasRadiobox) + Convert.ToInt32(design.HasCheckbox) + Convert.ToInt32(design.HasInt) + Convert.ToInt32(design.HasDecimal) + Convert.ToInt32(design.HasTextbox) + Convert.ToInt32(design.HasTextarea) + Convert.ToInt32(design.HasDateTime) + Convert.ToInt32(design.HasBankList) + Convert.ToInt32(design.HasAttachment) + Convert.ToInt32(design.HasGrid) + Convert.ToInt32(design.HasAgreement);
        var radioTextBoxScore = GetRadioTextBoxScore(item, design, numberOfComponents);
        var checkboxScore = item != null && numberOfComponents > 0 && item.CheckboxValue ? 100m / (decimal)numberOfComponents : 0;
        var agreementScore = item != null && numberOfComponents > 0 && item.AgreementValue ? 100m / (decimal)numberOfComponents : 0;
        var intScore = item != null && numberOfComponents > 0 && item.IntValue > 0 ? 100m / (decimal)numberOfComponents : 0;
        var decimalScore = item != null && numberOfComponents > 0 && item.DecimalValue > 0 ? 100m / (decimal)numberOfComponents : 0;
        var textareaScore = item != null && numberOfComponents > 0 && !string.IsNullOrEmpty(item.TextareaValue) ? 100m / (decimal)numberOfComponents : 0;
        var dateTimeScore = item != null && numberOfComponents > 0 && design.HasDateTime && item.DateTimeValue > new DateTime(1800, 1, 1) ? 100m / (decimal)numberOfComponents : 0;
        var bankListScore = item != null && numberOfComponents > 0 && item.BankList != null && item.BankList.Any() ? 100m / (decimal)numberOfComponents : 0;
        var gridScore = item != null && numberOfComponents > 0 && item.GridValue != null && item.GridValue.Any() ? 100m / (decimal)numberOfComponents : 0;
        var attachmentScore = item != null && numberOfComponents > 0 && item.AttachmentValue != null && item.AttachmentValue.Any() ? 100m / (decimal)numberOfComponents : 0;
        var totalScore = radioTextBoxScore + checkboxScore + intScore + decimalScore + textareaScore + dateTimeScore + bankListScore + attachmentScore + gridScore + agreementScore;

        item.Scoring = totalScore;
        var totalWeight = DueDiligenceDesignList != null ? DueDiligenceDesignList.Sum(e => e.Weight) : 0;
        item.Outcome = totalWeight > 0 ? Math.Round(item.Scoring * ((decimal)design.Weight / (decimal)totalWeight), 2) : 0; ;
    }

    decimal GetRadioTextBoxScore(DueDiligence item, DueDiligenceDesign design, int numberOfComponents)
    {
        if (design.HasRadiobox && design.HasTextbox && numberOfComponents == 2)
        {
            return !item.RadioboxValue ? 100m : !string.IsNullOrEmpty(item.TextboxValue) ? 100m : 0;
        }
        else if (design.HasRadiobox)
        {
            return item != null && numberOfComponents > 0 && item.RadioboxValue ? 100m / (decimal)numberOfComponents : 0;
        }
        else if (design.HasTextbox)
        {
            return item != null && numberOfComponents > 0 && !string.IsNullOrEmpty(item.TextboxValue) ? 100m / (decimal)numberOfComponents : 0;
        }
        else
        {
            return 0;
        }
    }
}

<style>
    .scoring-values {
    }

        .scoring-values .k-input-inner {
            text-align: end;
            font-size: 0.75rem;
            padding: 5px 8px;
        }

    .total-outcome .k-input-inner {
        text-align: end;
    }

    .scoring-values .k-state-disabled, .k-widget[disabled], .k-disabled {
        opacity: 1;
    }

    .scoring-values .scoring-title {
        color: var(--mud-palette-info);
        text-align: end;
    }

    .scoring-values .scoring {
        color: var(--mud-palette-info);
    }

    .scoring-values .weight {
        color: var(--mud-palette-info);
    }

    .scoring-values .outcome {
        color: #fff;
        background-color: var(--mud-palette-info);
    }

        .scoring-values .outcome.k-rounded-md {
            border-radius: 16px;
        }

    .radio-value .k-radio-list-horizontal, .k-radio-list.k-list-horizontal {
        min-width: 6.875rem;
    }
</style>