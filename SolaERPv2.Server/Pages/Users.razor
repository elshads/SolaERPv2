@page "/users"
@implements IDisposable


<PageTitle>Users</PageTitle>


<TelerikTabStrip ActiveTabIndex="@activeTabIndex" ActiveTabIndexChanged="@ActiveTabIndexChanged">
    <TabStripTab Title="Waiting for Approval">
        <Content>
            <DataGrid Data="@userList"
                      CanExport="true"
                      CanDelete="true"
                      CanReset="false"
                      ResetButtonText="Reset Sessions"
                      OnDelete="@((IEnumerable<AppUser> deletedUsers) => OnUserDelete(deletedUsers))"
                      OnReset="@((IEnumerable<AppUser> resetUsers) => OnUserReset(resetUsers))"
                      Height="calc(100vh - 240px)"
                      ShowSearchBar="true"
                      OnRowDoubleClick="@OnRowDoubleClickHandler"
                      SearchFields="@(new List<string> { "UserName", "FullName", "CompanyName", "Position", "StatusName" })"
                      @bind-SelectedItems="@selectedUserList">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(AppUser.Id))" Title="Id" Width="70px" Editable="false" TextAlign="ColumnTextAlign.Right" Visible="false" />
                    <GridColumn Field="@(nameof(AppUser.UserName))" Title="UserName" Width="260px" />
                    <GridColumn Field="@(nameof(AppUser.FullName))" Title="Name" Width="180px" />
                    <GridColumn Field="@(nameof(AppUser.CompanyName))" Title="Company" Width="300px" />
                    <GridColumn Field="@(nameof(AppUser.Position))" Title="Position" Width="180px" />
                    <GridColumn Field="@(nameof(AppUser.Sessions))" Title="Sessions" Width="110px">
                        <Template>
                            <div class="flex-center-y flex-center-x">
                                @{
                                    var user = context as AppUser;
                                    if (user != null && user.Sessions > 0)
                                    {
                                        <MudIcon Icon="@Icons.Filled.DesktopWindows" Color="Color.Success" Size="Size.Small" />
                                        <span class="k-px-2">@(user.Sessions)</span>
                                    }
                                    else if (user != null && user.Sessions < 1)
                                    {
                                        <MudIcon Icon="@Icons.Filled.DesktopAccessDisabled" Color="Color.Default" Size="Size.Small" />
                                        <span class="k-px-2">@(user.Sessions)</span>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Filled.DesktopAccessDisabled" Color="Color.Default" Size="Size.Small" />
                                        <span class="k-px-2">0</span>
                                    }
                                }
                            </div>
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@(nameof(AppUser.LastActivity))" Title="Last Activity" Width="150px">
                        <Template>
                            @{
                                var user = context as AppUser;
                                if (user != null && user.LastActivity > new DateTime(1, 1, 1))
                                {
                                    <span>@(user.LastActivity.ToString("yyyy-MM-dd HH:mm"))</span>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@(nameof(AppUser.CreatedOn))" Title="Created" Width="150px">
                        <Template>
                            @{
                                var user = context as AppUser;
                                if (user != null && user.CreatedOn > new DateTime(1, 1, 1))
                                {
                                    <span>@(user.CreatedOn.ToString("yyyy-MM-dd HH:mm"))</span>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@(nameof(AppUser.StatusName))" Title="Status" Width="100px">
                        <Template>
                            <div class="flex-center-y">
                                @{
                                    var user = context as AppUser;
                                    if (user is { StatusId: 0 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.Person" Color="Color.Warning" Size="Size.Small" />
                                    }
                                    else if (user is { StatusId: 1 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.Person" Color="Color.Success" Size="Size.Small" />
                                    }
                                    else if (user is { StatusId: 2 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.PersonOff" Color="Color.Default" Size="Size.Small" />
                                    }
                                    else
                                    {
                                        <span>none</span>
                                    }
                                }
                                <span class="k-px-2">@user.StatusName</span>
                            </div>
                        </Template>
                    </GridColumn>
                </DataGridColumns>
            </DataGrid>
        </Content>
    </TabStripTab>

    <TabStripTab Title="All">
        <Content>

        </Content>
    </TabStripTab>
</TelerikTabStrip>



@code {
    [CascadingParameter] AppState? AppState { get; set; }
    [CascadingParameter] DialogFactory? DialogFactory { get; set; }

    List<AppUser>? userList = new();
    IEnumerable<AppUser>? selectedUserList = new List<AppUser>();
    IEnumerable<AppUser>? deletedUserList = new List<AppUser>();
    IEnumerable<Status>? userStatusList = new List<Status>();

    //bool _showApproveDialog = false;
    //string? _approveComment = "";
    //bool _approveSelected = false;
    //TelerikDialog? _approveDialogRef;

    int activeTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        if (AppState == null) return;
        AppState.SetDefaults();
        AppState.BackButtonVisible = true;
        AppState.OnBackClick += BackClick;
    }

    void IDisposable.Dispose()
    {
        if (AppState == null) return;
        AppState.OnBackClick -= BackClick;
    }

    async Task LoadData()
    {
        if (AppState == null) return;

        AppState.Loading = true;
        userStatusList = AppUserService.GetStatusList();
        var _userList = await AppUserService.GetAllAsync();
        if (userList != null) { userList = _userList.ToList(); }
        AppState.Loading = false;
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/users/card?id={id}");
    }

    void OnRowClickHandler(GridRowClickEventArgs args)
    {
        if (args.Item is AppUser argsItem) { }
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        if (args.Item is AppUser argsItem) { GoToDetails(argsItem.Id); }
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    void ActiveTabIndexChanged(int tabIndex)
    {
        if (AppState == null) return;

        AppState.Loading = true;
        activeTabIndex = tabIndex;
        selectedUserList = new List<AppUser>();
        //SetMenuButtonsVisibility();
        AppState.Loading = false;
    }

    async Task OnUserDelete(IEnumerable<AppUser> deletedUsers)
    {
        var sqlResult = await AppUserService.DeleteById(deletedUsers.Select(e => e.Id).ToList());
        if (sqlResult.QueryResultMessage != null) { AppState.ShowAlert(sqlResult.QueryResultMessage, Severity.Error); }
    }

    async Task OnUserReset(IEnumerable<AppUser> resetUsers)
    {
        var sqlResult = await AppUserService.ResetSessionsCounter(resetUsers.Select(e => e.Id).ToList());
    }
}