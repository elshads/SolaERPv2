@page "/liststage"

@implements IDisposable

@inject ApproveStageService ApproveStageService


<MudCard Class="k-mb-4">
    <MudCardContent>
        <TelerikGridLayout RowSpacing="8px" ColumnSpacing="16px" VerticalAlign="GridLayoutVerticalAlign.Top">
            <GridLayoutItems>
                <GridLayoutItem Row="1">
                    <div class="k-form-field k-pb-3">
                        <label for="state-autocomplete" class="k-label k-form-label">Procedur: </label>
                        <div class="k-form-field-wrap">
                            <ItemDropDownList Data="@procedureList"
                                              @bind-Item="@procedure"
                                              UniqueField="ProcedureId"
                                              TextField="ProcedureName"
                                              TValue="int"
                                              TItem="Procedure"
                                              SearchFields="@(new List<string> { "ProcedureKey", "ProcedureName"})"
                                              Width="300px"
                                              PopupWidth="100%"
                                              PopupMaxWidth="500px" />


                        </div>
                    </div>
                    <div class="k-form-field">
                        <label class="k-label k-form-label">Business Unit: </label>
                        <div class="k-form-field-wrap">
                            <ItemDropDownList Data="@businessUnitList"
                                              @bind-Item="@businessUnit"
                                              UniqueField="BusinessUnitId"
                                              TextField="BusinessUnitCode"
                                              TValue="int"
                                              TItem="BusinessUnit"
                                              SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                                              Width="300px"
                                              PopupWidth="100%"
                                              PopupMaxWidth="500px" />
                        </div>
                    </div>
                </GridLayoutItem>

                <GridLayoutItem Row="1">
                    <div class="form-editcontext">
                        <div class="form-editcontext">
                            <TelerikForm EditContext="@editContext"
                                         ValidationMessageType="FormValidationMessageType.Inline"
                                         Columns="@(AppState.MobileView ? 1 : 2)"
                                         ColumnSpacing="1rem">
                                <FormValidation>
                                    <DataAnnotationsValidator></DataAnnotationsValidator>
                                </FormValidation>
                                <FormItems>
                                    <FormItem Field="@nameof(ApproveStageMain.ApproveStageName)" LabelText="Approve Stage Name: " Enabled="true"></FormItem>
                                </FormItems>
                                <FormButtons />
                            </TelerikForm>
                        </div>
                    </div>
                </GridLayoutItem>
            </GridLayoutItems>
        </TelerikGridLayout>
    </MudCardContent>
</MudCard>



<div class="k-mt-2">
    <TelerikGridLayout RowSpacing="8px" ColumnSpacing="8px">
        <GridLayoutItems>
            <GridLayoutItem Row="2" Column="1">

                <DataGrid @bind-Data="@stageDetailList"
                          GridEditMode="GridEditMode.Incell"
                          CanAdd="true"
                          CanDelete="true"
                          OnCreate="CreateSequence"
                          OnDelete="@((IEnumerable<ApproveStageDetail> items) => DeleteSequence(items))"
                          ShowCheckBoxColumn="false"
                          ShowToolbar="false"
                          DeleteButtonText=""
                          Height="calc(100vh - 200px)"
                          ShowSearchBar="false"
                          OnRowClick="@OnRowClickHandler"
                          Pageable="false">
                    <DataGridColumns>
                        <GridColumn Field="@(nameof(ApproveStageDetail.ApproveStageDetailsName))" Title="Details Name" />
                        <GridColumn Field="@(nameof(ApproveStageDetail.Sequence))" Title="Sequence" Editable="false" />
                    </DataGridColumns>
                </DataGrid>


            </GridLayoutItem>
            <GridLayoutItem Row="@(!AppState.MobileView? 2 : 3)" Column="@(!AppState.MobileView? 2 : 1)">

                <DataGrid @bind-Data="@stageRoleList"
                          GridEditMode="GridEditMode.Incell"
                          OnCreate="CreateRole"
                          CanAdd="true"
                          CanDelete="true"
                          ShowToolbar="false"
                          ShowCheckBoxColumn="false"
                          DeleteButtonText=""
                          Height="calc(100vh - 200px)"
                          ShowSearchBar="false"
                          Pageable="false">
                    <DataGridColumns>
                        <GridColumn Field=@nameof(ApproveStageRole.ApproveRole.ApproveRoleName) Title="Role Name">
                            <EditorTemplate>
                                @{
                                    var selectedStageRole = context as ApproveStageRole;
                                    <TelerikComboBox Value="@selectedStageRole.ApproveRoleId"
                                                 ValueChanged="@((int value)=>ApproveRoleChanged(selectedStageRole,value))"
                                                 ValueExpression="()=>selectedStageRole.ApproveRoleId"
                                                 Data="@approveRoleList"
                                                 TextField="ApproveRoleName"
                                                 ValueField="ApproveRoleId"
                                                 Placeholder="Select..."
                                                 Filterable="true"
                                                 FilterOperator="StringFilterOperator.Contains" />
                                }
                            </EditorTemplate>

                        </GridColumn>

                        <GridColumn Field="@(nameof(ApproveStageRole.AmountFrom))" Title="Amount" />
                        <GridColumn Field="@(nameof(ApproveStageRole.AmountTo))" Title="AmountTo" />
                    </DataGridColumns>
                </DataGrid>


            </GridLayoutItem>

        </GridLayoutItems>
    </TelerikGridLayout>
</div>



@code {
    [CascadingParameter] public AppState? AppState { get; set; }
    [Parameter] public bool CanDelete { get; set; } = false;

    List<ApproveStageDetail>? stageDetailList = new();
    List<ApproveStageRole>? stageRoleList = new();
    IEnumerable<Procedure> procedureList = new List<Procedure>();
    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    IEnumerable<ApproveRole> approveRoleList = new List<ApproveRole>();

    ApproveRole? approveRole = new();
    ApproveStageDetail? stageDetail = new();
    ApproveStageRole? stageRole = new();
    BusinessUnit? businessUnit = new();
    Procedure? procedure = new();
    ApproveStageMain? stageMain = new();
   
    EditContext? editContext = new(new ApproveStageMain());

    int? _mainId;

    async Task SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            _mainId = Convert.ToInt32(id);
        }
        else
        {
            AppState.DeleteButtonVisible = false;
        }

    }

    void CreateRole(GridCommandEventArgs args)
    {
        var item = args.Item as ApproveStageRole;

        stageDetail.ApproveStageRoles = stageRoleList;
    }

    void CreateSequence(GridCommandEventArgs args)
    {
        var item = args.Item as ApproveStageDetail;

        item.Sequence = stageDetailList.Max(model => model.Sequence) + 1;
    }

    void DeleteSequence(IEnumerable<ApproveStageDetail> args)
    {
        int a = 1;
        foreach (var item in stageDetailList)
        {
            item.Sequence = a;
            a++;
        }


    }

    async void DeleteDetail()
    {
        var deletedId = new List<int>() { stageDetail.ApproveStageDetailsId };
        //var sqlResult = await ApproveStageService.DeleteDetail(deletedId);
        //AppState.ShowAlert("Item successfully detail deleted", Severity.Success);
        //NavigationManager.NavigateTo("/liststage");
    }

    async void DeleteRole()
    {
        var deletedId = new List<int>() { stageRole.ApproveStageRoleId };
        var sqlResult = await ApproveStageService.DeleteRole(deletedId);
        AppState.ShowAlert("Item successfully role deleted", Severity.Success);
        NavigationManager.NavigateTo("/liststage");
    }


    void ApproveRoleChanged(ApproveStageRole approveStageRole, int value)
    {
        approveStageRole.ApproveRoleId = value;
        var name = approveRoleList?.FirstOrDefault(x => x.ApproveRoleId == value);
        approveStageRole.ApproveRoleName = name != null && name.ApproveRoleName != null ? name.ApproveRoleName : "";
    }

    async Task GetStageDetailList()
    {
        var _stageDetailList = await ApproveStageService.ApproveStageDetailLoad(_mainId??0);
        stageDetailList = _stageDetailList.ToList();
        stageDetail = stageDetailList.Any() ? stageDetailList.FirstOrDefault() : new();
    }

    async Task<IEnumerable<ApproveStageDetail>> GetDbList()
    {
        var _stageDetailList = await ApproveStageService.ApproveStageDetailLoad(_mainId ?? 0);
        return _stageDetailList.ToList();
    }

    async Task GetStageRoleList(int? id)
    {
        var _stageRoleList = await ApproveStageService.ApproveStageRoleLoad(id);
        stageRoleList = _stageRoleList?.ToList();
    }

    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        procedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        businessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetRoleList()
    {
        approveRoleList = await ApproveStageService.GetRoles();
        approveRole = approveRoleList.Any() ? approveRoleList.FirstOrDefault() : new();
    }

    async Task LoadDateByApproveMainId()
    {
        stageMain = await ApproveStageService.GetMainByMainId(_mainId);
        procedure = procedureList.FirstOrDefault(x => x.ProcedureId == stageMain.ProcedureId);
        businessUnit = businessUnitList.FirstOrDefault(x => x.BusinessUnitId == stageMain.BusinessUnitId);
    }

    async Task LoadData()
    {
        await GetRoleList();
        await GetBusinessUnitList();
        await GetProcedureList();
        if (_mainId > 0)
        {
            await LoadDateByApproveMainId();
            await GetStageDetailList();
        }
        editContext = new EditContext(stageMain);
    }

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        SetQueryVariables();
        await LoadData();
    }

    async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        stageDetail = args.Item as ApproveStageDetail;
        stageRoleList = stageDetail != null && stageDetail.ApproveStageRoles != null ? stageDetail.ApproveStageRoles : new();
    }

    //async void SaveClick()
    //{
    //    AppState.Loading = true;

    //    stageMain.ProcedureId = procedure.ProcedureId;
    //    stageMain.BusinessUnitId = businessUnit.BusinessUnitId;

    //    stageDetail.ApproveStageMainId = stageMain.ApproveStageMainId;

    //    foreach (var item in stageDetailList)
    //    {
    //        item.ApproveStageMainId = stageMain.ApproveStageMainId;
    //    }

    //    await ApproveStageService.Save(stageMain, stageDetailList);

    //    AppState.Loading = false;
    //    NavigationManager.NavigateTo("/liststage");
    //}


    async void SaveClick()
    {
        AppState.Loading = true;

        //int mainId = 0;
        var validated = Validate();
        if (validated)
        {
            var deletedStageList = new List<ApproveStageDetail>();
            //await GetDbList();
            foreach (var item in await GetDbList())
            {
                bool checkDeleted = stageDetailList.Any(sd => sd.ApproveStageDetailsId == item.ApproveStageDetailsId);

                if (!checkDeleted)
                    deletedStageList.Add(item);
            }
            if (deletedStageList.Any())
                await ApproveStageService.DeleteDetail(deletedStageList);
            stageMain.ProcedureId = procedure.ProcedureId;
            stageMain.BusinessUnitId = businessUnit.BusinessUnitId;

            stageDetail.ApproveStageMainId = stageMain.ApproveStageMainId;

            foreach (var item in stageDetailList)
            {
                item.ApproveStageMainId = stageMain.ApproveStageMainId;
            }

           
            if(_mainId == null){
                _mainId = await ApproveStageService.SaveMain(stageMain);
            }
            

            //var result2 = await ApproveStageService.SaveDetails(stageDetailList);
            var result2 = await ApproveStageService.SaveDetails(stageDetailList, _mainId);

        }

        AppState.Loading = false;
        NavigationManager.NavigateTo("/liststage");
    }



    bool Validate()
    {
        if (stageMain.ApproveStageName == null)
        {
            AppState.ShowAlert("Ad bos ola bilmez", Severity.Error);
            return false;
        }

        //if (stageRole.ApproveRoleName==null)
        //{
        //    AppState.ShowAlert("Rol Bos ola bilmez 3", Severity.Error);
        //    return false;
        //}

        return true;
    }

    async void DeleteClick()
    {
        var deletedId = new List<int>() { stageMain.ApproveStageMainId };
        var sqlResult = await ApproveStageService.Delete(deletedId);
        AppState.ShowAlert("Item successfully deleted", Severity.Success);
        NavigationManager.NavigateTo("/listcompany");
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
        AppState.OnDeleteClick -= DeleteClick;

    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;
        AppState.DeleteButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
        AppState.OnDeleteClick += DeleteClick;

    }

    async void BackClick()
    {
        WindowVisible=true;
    }

    async void BackClickPage()
    {
        NavigationManager.NavigateTo("/listcompany");
    }

    bool WindowVisible { get; set; }
 
    
}


<TelerikButton Icon="window" OnClick=@(()=> WindowVisible = true)>Open Modal</TelerikButton>

<TelerikWindow Class="demo-window" Width="400px" Centered="true" @bind-Visible=@WindowVisible Modal="true">
    <WindowTitle>
        <strong>Alert!</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <strong>Dəyişiklik etmiş ola bilərsiniz.Yadda saxlamadan yenədə qayıtmaq istiyirsinizmi? </strong>
        <br />
        <br />
        <TelerikButton OnClick="@BackClickPage">Bəli!</TelerikButton>
    </WindowContent>
</TelerikWindow>



<style type="text/css">
    .demo-window {
        z-index: 44444;
    }
</style>