@page "/liststage"

@implements IDisposable

@inject StageService _stageService
@*@inject StageRoleService _stageRoleService
*@
@inject ApproveStageService ApproveStageService



<div class="k-pb-4">
    <label for="bu_list">Procedures:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@procedureList"
                      Item="@selectedProcedure"
                      UniqueField="ProcedureId"
                      TextField="ProcedureName"
                      TValue="int"
                      TItem="Procedure"
                      SearchFields="@(new List<string> { "ProcedureKey", "ProcedureName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>


<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@businessUnitList"
                      Item="@selectedBusinessUnit"
                      UniqueField="BusinessUnitId"
                      TextField="BusinessUnitCode"
                      TValue="int"
                      TItem="BusinessUnit"
                      SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>



<MudGrid>

    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid Data="@stageDetailList"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"
                      OnRowClick="@OnRowClickHandler"
                      SearchFields="@(new List<string> {"Name", "ApproveStageDetailName"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(ApproveStageDetail.ApproveStageDetailsName))" Title="Name" />
                    <GridColumn Field="@(nameof(ApproveStageDetail.Sequence))" Title="Sequence" />
                </DataGridColumns>
            </DataGrid>
        </MudPaper>
    </MudItem>


    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid Data="@stageRoleList"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"
                      SearchFields="@(new List<string> {"Name", "Amount","AmountTo"})">
                <DataGridColumns>
@*                    <GridColumn Field="@(nameof(ApproveStageRole.AmountFrom))" Title="Amount" /> ApproveRoleName
*@                    <GridColumn Field="@(nameof(ApproveStageRole.AmountFrom))" Title="Amount" />
                    <GridColumn Field="@(nameof(ApproveStageRole.AmountTo))" Title="AmountTo" />
                </DataGridColumns> 
            </DataGrid>
        </MudPaper>
    </MudItem>

</MudGrid>

@code{
    [CascadingParameter] public AppState? AppState { get; set; }

    List<ApproveStageDetail>? stageDetailList = new();
    List<ApproveStageRole>? stageRoleList = new();

    IEnumerable<Procedure> procedureList = new List<Procedure>(); 
    Procedure? selectedProcedure = new();

    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    BusinessUnit? selectedBusinessUnit = new();

    ApproveStageDetail? stageDetail;


    int _mainId;

    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            _mainId = Convert.ToInt32(id);
        }
    }

    async Task GetStageDetailList()
    {
        var _stageDetailList = await ApproveStageService.ApproveStageDetailLoad(_mainId);
        stageDetailList = _stageDetailList.ToList();
    }

    async Task GetStageRoleList(int? id)
    {
        var _stageRoleList = await ApproveStageService.ApproveStageRoleLoad(id);
        stageRoleList = _stageRoleList?.ToList();
    }

    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        selectedProcedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        selectedBusinessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task BusinessUnitChanged(BusinessUnit businessUnit)
    {
        AppState.Loading = true;
        selectedBusinessUnit = businessUnit;
        await GetStageDetailList();
        AppState.Loading = false;
    }

    async Task ProcedureChanged(Procedure procedure)
    {
        AppState.Loading = true;
        selectedProcedure = procedure;
        await GetStageDetailList();
        AppState.Loading = false;
    }

    async Task LoadData()
    {
        await GetBusinessUnitList();
        await GetProcedureList();
        await GetStageDetailList();
    }

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        SetQueryVariables();
        await LoadData();
    }

    async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        stageDetail = args.Item as ApproveStageDetail;
        await GetStageRoleList(stageDetail?.ApproveStageDetailsId);
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/listcompany");
    }

    async void SaveClick()
    {

    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
    }
}