@page "/liststage"

@implements IDisposable

@inject CustomerService _customerService
@inject StageService _stageService
@inject StageRoleService _stageRoleService

<MudGrid>
   
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid Data="@stageList"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"
                      OnRowClick="@OnRowClickHandler"
                      SearchFields="@(new List<string> {"Name", "Sequence"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(Stage.Name))" Title="Name" />
                    <GridColumn Field="@(nameof(Stage.Sequence))" Title="Sequence" />
                </DataGridColumns>
            </DataGrid>
        </MudPaper>
    </MudItem>
 
    
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid Data="@stageRoleList"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"             
                      SearchFields="@(new List<string> {"Name", "Amoun","AmountTo"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(StageRole.Name))" Title="Name" />
                    <GridColumn Field="@(nameof(StageRole.Amount))" Title="Amount" />
                    <GridColumn Field="@(nameof(StageRole.AmountTo))" Title="AmountTo" />
                </DataGridColumns>
            </DataGrid>
        </MudPaper>
    </MudItem>
   
</MudGrid>



@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    int _customeId;
    public List<Stage>? stageList = new();
    public List<StageRole>? stageRoleList = new();

    Stage? stage = new();


    protected override async Task OnInitializedAsync()
    {
        SetQueryVariables();
        await LoadData();
    }


    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            _customeId = Convert.ToInt32(id);
        }
    }

    async Task LoadData()
    {
        var list = await _stageService.GetAllByCustomer(_customeId);
        stageList = list.ToList();

        var id = stageList.FirstOrDefault()?.StageId;

        await GetAllStageRolesToView(id);

    }

    async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        stage = args.Item as Stage;

        await GetAllStageRolesToView(stage?.StageId);
    }


    async Task GetAllStageRolesToView(int? id)
    {
        var _stageRoleList = await _stageRoleService.GetAllByStageId(id);
        stageRoleList = _stageRoleList?.ToList();
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    async void SaveClick()
    {
        //var validated = Validate();
        //if (validated)
        //{
        //    var sqlResult = await _customerService.Save(customer);
        //    if (sqlResult.QueryResultMessage == null)
        //    {
        //        AppState.ShowAlert("Company successfully saved", Severity.Success);
        //    }
        //    else
        //    {
        //        AppState.ShowAlert(sqlResult.QueryResultMessage, Severity.Error);
        //    }
        //}
    }

    bool Validate()
    {
        return true;
    }
}