@page "/liststage"

@implements IDisposable

@inject ApproveStageService ApproveStageService


<TelerikGridLayout RowSpacing="8px" ColumnSpacing="16px" VerticalAlign="GridLayoutVerticalAlign.Top">
    <GridLayoutItems>
        <GridLayoutItem Row="1">
            <div class="k-form-field k-pb-3">
                <label for="state-autocomplete" class="k-label k-form-label">Procedur: </label>
                <div class="k-form-field-wrap">
                             <ItemDropDownList
                                    Data="@procedureList"
                                    @bind-Item="@selectedProcedure"
                                    UniqueField="ProcedureId"
                                    TextField="ProcedureName"
                                    TValue="int"
                                    TItem="Procedure"
                                    SearchFields="@(new List<string> { "ProcedureKey", "ProcedureName"})"
                                    Width="300px"
                                    PopupWidth="100%"
                                    PopupMaxWidth="500px" />
                </div>
            </div>
            <div class="k-form-field">
                <label class="k-label k-form-label">Business Unit: </label>
                <div class="k-form-field-wrap">
                    <ItemDropDownList Data="@businessUnitList"
                                      @bind-Item="@selectedBusinessUnit"
                                      UniqueField="BusinessUnitId"
                                      TextField="BusinessUnitCode"
                                      TValue="int"
                                      TItem="BusinessUnit"
                                      SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                                      Width="300px"
                                      PopupWidth="100%"
                                      PopupMaxWidth="500px" />
                </div>
            </div>
        </GridLayoutItem>



        <GridLayoutItem Row="1">
            <div class="form-editcontext">
                <div class="form-editcontext">
                <TelerikForm EditContext="@editContext"
                             ValidationMessageType="FormValidationMessageType.Inline"
                             Columns="@(AppState.MobileView ? 1 : 2)"
                             ColumnSpacing="1rem">
                    <FormValidation>
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                    </FormValidation>
                    <FormItems>
                        <FormItem Field="@nameof(ApproveStageMain.ApproveStageName)" LabelText="Approve Stage Name: " Enabled="true"></FormItem>
                    </FormItems>
                    <FormButtons />
                </TelerikForm>
                </div>
            </div>
        </GridLayoutItem>

    </GridLayoutItems>
</TelerikGridLayout>




<MudGrid>

    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid @bind-Data="@stageDetailList"
                GridEditMode="GridEditMode.Incell"
                      CanAdd="true"
                      OnCreate="CreateSequence"
                      CanDelete="true"
                      ShowCheckBoxColumn="false"
                      ShowToolbar="false"
                      DeleteButtonText=""
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="false"
                      OnRowClick="@OnRowClickHandler"
                      SearchFields="@(new List<string> {"Name", "ApproveStageDetailName"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(ApproveStageDetail.ApproveStageDetailsName))" Title="Details Name" />
                    <GridColumn Field="@(nameof(ApproveStageDetail.Sequence))" Title="Sequence" Editable="false" />
                </DataGridColumns>
            </DataGrid>

        </MudPaper>
    </MudItem>


    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid @bind-Data="@stageRoleList"
                      GridEditMode="GridEditMode.Incell"
                      CanAdd="true"
                      CanDelete="true"
                      ShowCheckBoxColumn="false"
                      ShowToolbar="false"
                      DeleteButtonText=""
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="false"
                      SearchFields="@(new List<string> {"Name", "Amount","AmountTo"})">
                <DataGridColumns>
                    <GridColumn Field=@nameof(ApproveStageRole.ApproveRole.ApproveRoleName) Title="Role Name">
                        <EditorTemplate>
                            @{
                                var selectedStageRole = context as ApproveStageRole;
                                    <TelerikComboBox 
                                             Value="@selectedStageRole.ApproveRoleId"   
                                             ValueChanged="@((int value)=>ApproveRoleChanged(selectedStageRole,value))"
                                             ValueExpression="()=>selectedStageRole.ApproveRoleId"
                                             Data="@approveRoleList"
                                             TextField="ApproveRoleName"
                                             ValueField="ApproveRoleId"
                                             Placeholder="Select..."
                                             Filterable="true"
                                             FilterOperator="StringFilterOperator.Contains" />
                            }
                        </EditorTemplate>

                    </GridColumn>

                    <GridColumn Field="@(nameof(ApproveStageRole.AmountFrom))" Title="Amount" />
                    <GridColumn Field="@(nameof(ApproveStageRole.AmountTo))" Title="AmountTo" />
                </DataGridColumns> 
            </DataGrid>
        </MudPaper>
    </MudItem>

</MudGrid>

@code{
    [CascadingParameter] public AppState? AppState { get; set; }

    List<ApproveStageDetail>? stageDetailList = new();
    ApproveStageDetail? selectedStageDetail;

    List<ApproveStageRole>? stageRoleList = new();
    //ApproveStageRole? selectedStageRole;

    IEnumerable<Procedure> procedureList = new List<Procedure>(); 
    Procedure? selectedProcedure = new();

    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    BusinessUnit? selectedBusinessUnit = new();


    IEnumerable<ApproveRole> approveRoleList = new List<ApproveRole>();
    ApproveRole? selectedRole;


    ApproveStageMain? selectedMain = new();
    EditContext? editContext = new(new ApproveStageMain());

    int _mainId;

    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            _mainId = Convert.ToInt32(id);
        }

    }

    void CreateSequence(GridCommandEventArgs args)
    {
        var item = args.Item as ApproveStageDetail;
        item.Sequence = 10;
    }

    void ApproveRoleChanged(ApproveStageRole approveStageRole,int value)
    {
        approveStageRole.ApproveRoleId = value;
        var name = approveRoleList?.FirstOrDefault(x => x.ApproveRoleId == value);
        approveStageRole.ApproveRoleName =name!=null &&  name.ApproveRoleName !=null ? name.ApproveRoleName : "";
    }

    async Task GetStageDetailList()
    {
        var _stageDetailList = await ApproveStageService.ApproveStageDetailLoad(_mainId);
        stageDetailList = _stageDetailList.ToList();
    }

    async Task GetStageRoleList(int? id)
    {
        var _stageRoleList = await ApproveStageService.ApproveStageRoleLoad(id);
        stageRoleList = _stageRoleList?.ToList();
    }

    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        selectedProcedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        selectedBusinessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetRoleList()
    {
        approveRoleList = await ApproveStageService.GetRoles();
        selectedRole = approveRoleList.Any() ? approveRoleList.FirstOrDefault() : new();
    }

    async Task LoadDateByApproveMainId()
    {
        selectedProcedure = await ApproveStageService.GetProcuderByMainId(_mainId);
        selectedBusinessUnit = await ApproveStageService.GetBusinessUnitByMainId(_mainId);
        selectedMain= await ApproveStageService.GetMainByMainId(_mainId);
    }



    async Task LoadData()
    {       
        await GetRoleList();
        await GetBusinessUnitList();
        await GetProcedureList();
        await GetStageDetailList();
        await LoadDateByApproveMainId();
        editContext = new EditContext(selectedMain);
    }

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        SetQueryVariables();
        await LoadData();
    }

    async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        selectedStageDetail = args.Item as ApproveStageDetail;
        stageRoleList = selectedStageDetail != null && selectedStageDetail.ApproveStageRoles !=null ? selectedStageDetail.ApproveStageRoles : new();
        //await GetStageRoleList(selectedStageDetail?.ApproveStageDetailsId);
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/listcompany");
    }

    async void SaveClick()
    {
        AppState.Loading = true;
        selectedMain.ProcedureId = selectedProcedure.ProcedureId;
        selectedMain.BusinessUnitId = selectedBusinessUnit.BusinessUnitId;

        var result = await ApproveStageService.Save(selectedMain);

        AppState.Loading = false;

    }

    async void DeleteClick()
    {
        AppState.Loading = true;
       
        //var result = await ApproveStageService.Save(selectedMain);

        AppState.Loading = false;
    }

    bool Validate()
    {
        return true;
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
        AppState.OnDeleteClick -= DeleteClick;
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;
        AppState.DeleteButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
        AppState.OnDeleteClick += DeleteClick;
    }
}

