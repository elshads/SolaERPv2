@page "/liststage"

@implements IDisposable

@inject CompanyService _companyService
@inject StageService _stageService
@inject StageRoleService _stageRoleService

<MudGrid>
   
    <MudItem xs="6">

        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
          @*  <TelerikGrid Data="@company?.Stages"
                         EditMode="@GridEditMode.None"
                         Pageable="true"
                         PageSize="20"
                         OnRowClick="OnRowClickHandler">
                <GridColumns>
                    <GridColumn Field=@nameof(Stage.Name) />
                    <GridColumn Field=@nameof(Stage.Sequence) />
                </GridColumns>
            </TelerikGrid>*@

            <DataGrid Data="@company?.Stages"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      CanExport="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"
                      OnRowClick="@OnRowClickHandler"
                      SearchFields="@(new List<string> {"Name", "Sequence"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(Stage.Name))" Title="Name" />
                    <GridColumn Field="@(nameof(Stage.Sequence))" Title="Sequence" />
                </DataGridColumns>
            </DataGrid>
        </MudPaper>
    </MudItem>
 
    
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

          @*  <TelerikGrid Data="@stage.StageRoles" EditMode="@GridEditMode.Incell"
                         Height="500px"
                         Pageable="true" AutoGenerateColumns="true">
            </TelerikGrid>
              *@

     <DataGrid Data="@stage?.StageRoles"
                     
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"             
                      SearchFields="@(new List<string> {"Name", "StageId"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(StageRole.Name))" Title="Name" />
                    <GridColumn Field="@(nameof(StageRole.StageId))" Title="Sequence" />
                </DataGridColumns>
            </DataGrid>

          

        </MudPaper>
    </MudItem>
   
</MudGrid>



@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    int _userId;
    public List<Stage>? stageList = new();
    public List<StageRole>? stageRoleList = new();

    Stage? stage = new();
    Company? company = new();
    StageRole? stageRole = new();


    protected override async Task OnInitializedAsync()
    {
        SetQueryVariables();
        await LoadData();
    }


    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            _userId = Convert.ToInt32(id);
        }
    }

    //async Task GetStageRoleList()
    //{
    //    var _stageRole = await _stageRoleService.GetAllAsync(stage.StageId);
    //    stageRoleList = _stageRole.ToList();
    //}

    async Task LoadData()
    {
        company = await _companyService.GetByIdAsync(_userId);

        var _stageList = await _stageService.GetAll();
        stageList = _stageList.ToList();

    
        var _stageRoleList = await _stageRoleService.GetAll();
        stageRoleList = _stageRoleList.ToList();
        //await GetStageRoleList();

    }

    void OnRowClickHandler(GridRowClickEventArgs args)
    {
        stage = args.Item as Stage;
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    async void SaveClick()
    {
        var validated = Validate();
        if (validated)
        {
            var sqlResult = await _companyService.Save(company);
            if (sqlResult.QueryResultMessage == null)
            {
                AppState.ShowAlert("Company successfully saved", Severity.Success);
            }
            else
            {
                AppState.ShowAlert(sqlResult.QueryResultMessage, Severity.Error);
            }
        }
    }

    bool Validate()
    {
        return true;
    }
}