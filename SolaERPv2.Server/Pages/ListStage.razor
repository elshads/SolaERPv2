@page "/liststage"

@implements IDisposable

@inject ApproveStageService ApproveStageService


<TelerikGridLayout RowSpacing="8px" ColumnSpacing="16px" VerticalAlign="GridLayoutVerticalAlign.Top">
    <GridLayoutItems>
        <GridLayoutItem Row="1">
        <div>
            <label>Procedures:</label>
            <ItemDropDownList
                            Data="@procedureList"
                            Item="@selectedProcedure"
                            UniqueField="ProcedureId"
                            TextField="ProcedureName"
                            TValue="int"
                            TItem="Procedure"
                            SearchFields="@(new List<string> { "ProcedureKey", "ProcedureName"})"
                            Width="300px"
                            PopupWidth="100%"
                            PopupMaxWidth="500px" />
        </div>
        <div>
            <label>Business Unit:</label>
            <ItemDropDownList 
                            Data="@businessUnitList"
                            Item="@selectedBusinessUnit"
                            UniqueField="BusinessUnitId"
                            TextField="BusinessUnitCode"
                            TValue="int"
                            TItem="BusinessUnit"
                            SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                            Width="300px"
                            PopupWidth="100%"
                            PopupMaxWidth="500px" />
        </div>
        </GridLayoutItem>



        <GridLayoutItem Row="1">
            <ReadOnlyField Value="@(selectedProcedure?.ProcedureName)" Label="Procedure: " />
            <ReadOnlyField Value="@(selectedBusinessUnit?.BusinessUnitName)" Label="Business Unit: " />
        </GridLayoutItem>

    </GridLayoutItems>
</TelerikGridLayout>




<MudGrid>

    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid Data="@stageDetailList"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"
                      OnRowClick="@OnRowClickHandler"
                      SearchFields="@(new List<string> {"Name", "ApproveStageDetailName"})">
                <DataGridColumns>
                    <GridColumn Field="@(nameof(ApproveStageDetail.ApproveStageDetailsName))" Title="Details Name" />
                    <GridColumn Field="@(nameof(ApproveStageDetail.Sequence))" Title="Sequence" />
                </DataGridColumns>
            </DataGrid>
        </MudPaper>
    </MudItem>


    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <DataGrid Data="@stageRoleList"
                      CanAdd="true"
                      CanEdit="true"
                      CanDelete="true"
                      Height="calc(100vh - 285px)"
                      ShowSearchBar="true"
                      SearchFields="@(new List<string> {"Name", "Amount","AmountTo"})">
                <DataGridColumns>
                    <GridColumn Field=@nameof(ApproveStageRole.ApproveRole.ApproveRoleName) Title="Role Name">
                        <EditorTemplate>
                            @{
                                selectedStageRole = context as ApproveStageRole;
                                <TelerikComboBox @bind-Value="@selectedStageRole.ApproveRoleId"
                                             Id="bu_list"
                                             Data="@approveRoleList"
                                             TextField="ApproveRoleName"
                                             ValueField="ApproveRoleId"
                                             Placeholder="Select..."
                                             Filterable="true"
                                             FilterOperator="StringFilterOperator.Contains" />
                            }
                        </EditorTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(ApproveStageRole.AmountFrom))" Title="Amount" />
                    <GridColumn Field="@(nameof(ApproveStageRole.AmountTo))" Title="AmountTo" />
                </DataGridColumns> 
            </DataGrid>
        </MudPaper>
    </MudItem>

</MudGrid>

@code{
    [CascadingParameter] public AppState? AppState { get; set; }

    List<ApproveStageDetail>? stageDetailList = new();
    ApproveStageDetail? selectedStageDetail;
    
    List<ApproveStageRole>? stageRoleList = new();
    ApproveStageRole? selectedStageRole;

    IEnumerable<Procedure> procedureList = new List<Procedure>(); 
    Procedure? selectedProcedure = new();

    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    BusinessUnit? selectedBusinessUnit = new();


    IEnumerable<ApproveRole> approveRoleList = new List<ApproveRole>();
    ApproveRole? selectedRole;


    int _mainId;

    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            _mainId = Convert.ToInt32(id);
        }
    }

    async Task GetStageDetailList()
    {
        var _stageDetailList = await ApproveStageService.ApproveStageDetailLoad(_mainId);
        stageDetailList = _stageDetailList.ToList();
    }

    async Task GetStageRoleList(int? id)
    {
        var _stageRoleList = await ApproveStageService.ApproveStageRoleLoad(id);
        stageRoleList = _stageRoleList?.ToList();
    }

    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        selectedProcedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        selectedBusinessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetRoleList()
    {
        approveRoleList = await ApproveStageService.GetRoles();
        selectedRole = approveRoleList.Any() ? approveRoleList.FirstOrDefault() : new();
    }

    async Task LoadDateByApproveMainId()
    {
        selectedProcedure = await ApproveStageService.GetProcuderByMainId(_mainId);
        selectedBusinessUnit = await ApproveStageService.GetBusinessUnitByMainId(_mainId);
    }



    async Task LoadData()
    {
        await GetRoleList();
        await GetBusinessUnitList();
        await GetProcedureList();
        await GetStageDetailList();
        await LoadDateByApproveMainId();
    }

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        SetQueryVariables();
        await LoadData();
    }

    async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        selectedStageDetail = args.Item as ApproveStageDetail;
        await GetStageRoleList(selectedStageDetail?.ApproveStageDetailsId);
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/listcompany");
    }

    async void SaveClick()
    {

    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
    }
}