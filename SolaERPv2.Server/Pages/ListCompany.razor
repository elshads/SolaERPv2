@page "/listcompany"

@implements IDisposable

@inject BaseCompanyService _baseCompanyService
@inject CompanyService _companyService
@inject StageService _stageService




<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
   @* <TelerikDropDownList Data="@baseCompanyList"
                         ValueField="Id"
                         TextField="Name"
                         @bind-Value="@SelectedItem"
                         Id="selectId"
                         Width="300px">
    </TelerikDropDownList>*@
</div>

<DataGrid Data="@companyList"
          CanAdd="true"
          CanEdit="true"
          CanDelete="true"
          CanExport="true"
          Height="calc(100vh - 285px)"
          ShowSearchBar="true"
          OnRowDoubleClick="@OnRowDoubleClickHandler"
          SearchFields="@(new List<string> {"Name", "Description"})">
    <DataGridColumns>
        <GridColumn Field="@(nameof(Company.Name))" Title="Name"  />
        <GridColumn Field="@(nameof(Company.Description))" Title="Description"  />
    </DataGridColumns>
</DataGrid>


@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    public int SelectedItem { get; set; }

    public List<BaseCompany>? baseCompanyList = new();
    public List<Company>? companyList = new();
    public List<Stage>? stageList = new();


    Company? company = new();
    BaseCompany? baseCompany = new();

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
    }

    async Task LoadData()
    {
        company = new Company();
        baseCompany = new BaseCompany();

        var _baseCompanyList = await _baseCompanyService.GetAll();
        var _companyList = await _companyService.GetAll();
        var _stageList = await _stageService.GetAll();

        baseCompanyList = _baseCompanyList.ToList();
        companyList = _companyList.ToList();
        stageList = _stageList.ToList();

    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        company = args.Item as Company;
        GoToDetails(company.CompanyId);
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/liststage?id={id}");
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    async void SaveClick()
    {
        //var validated = Validate();
        //if (validated)
        //{
        //    var sqlResult = await _companyService.Save(company);
        //    if (sqlResult.QueryResultMessage == null)
        //    {
        //        AppState.ShowAlert("Company successfully saved", Severity.Success);
        //    }
        //    else
        //    {
        //        AppState.ShowAlert(sqlResult.QueryResultMessage, Severity.Error);
        //    }
        //}
    }

    bool Validate()
    {
        return true;
    }
}