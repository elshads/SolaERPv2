@page "/listcompany"
@using SolaERPv2.Server.ViewModels

@implements IDisposable

@inject ApproveStageService ApproveStageService

<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@businessUnitList"
                      Item="@selectedBusinessUnit"
                      ItemChanged="@BusinessUnitChanged"
                      UniqueField="BusinessUnitId"
                      TextField="BusinessUnitCode"
                      TValue="int"
                      TItem="BusinessUnit"
                      SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>

<DataGrid Data="@stageMainList"
          CanAdd="true"
          OnUpdate="@UpdateHandler"
          CanEdit="true"
          CanDelete="true"
          CanExport="true"
          Height="calc(100vh - 285px)"
          ShowSearchBar="true"
          OnRowDoubleClick="@OnRowDoubleClickHandler"
          SearchFields="@(new List<string> {"ApproveStageName", "ApproveStageName"})">
    <DataGridColumns>
        <GridColumn Field="@(nameof(ApproveStageMain.ApproveStageMainId))" Title="Approve Stage Name" />
        <GridColumn Field="@(nameof(ApproveStageMain.ApproveStageName))" Title="Approve Stage Name" />
        <GridColumn Field="@(nameof(ApproveStageMain.ProcedureId))" Title="P Id" />
        @*<GridColumn Field="@(nameof(ApproveStageMain.Procedure.ProcedureName))" Title="Procedure Name" />*@

       @* <GridColumn Field=@nameof(ApproveStageMain.BusinessUnit.BusinessUnitId) Title="Procedure Name">
            <EditorTemplate>
                @{
                    
                    <TelerikDropDownList Data="@businessUnitList" @bind-Value="@selectedBusinessUnit" />
                }
            </EditorTemplate>
        </GridColumn>*@
        @*<GridColumn Field=@nameof(ApproveStageMain.Procedure.ProcedureName) Title="Procedure Name">

           
        <EditorTemplate>

            @{
                    aprov = context as ApproveStageMain;

            }

                <TelerikComboBox @bind-Value="@aprov.ProcedureId"
                                 Id="bu_list"
                                 Data="@procedureList"
                                 TextField="ProcedureName"
                                 ValueField="ProcedureId"
                                 Placeholder="Select..."
                                 Filterable="true"
                                 FilterOperator="StringFilterOperator.Contains" />
            <ItemDropDownList Id="bu_list"
                                  Data="@procedureList"
                                  Item="@aprov.Procedure"
                                  UniqueField="ProcedureId"
                                  TextField="ProcedureName"
                                  TValue="int"
                                  TItem="Procedure"
                                  SearchFields="@(new List<string> { "ProcedureKey", "ProcedureName"})"
                                  Width="300px"
                                  PopupWidth="100%"
                                  PopupMaxWidth="500px" />
        </EditorTemplate>
        </GridColumn>*@

    </DataGridColumns>
</DataGrid>

@code{
    [CascadingParameter] public AppState? AppState { get; set; }

    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    BusinessUnit? selectedBusinessUnit = new();

    ApproveStageMain? aprov = new();

    List<FullApproveStageMain> fullApprove = new();

    List<ApproveStageMain> stageMainList = new();


    IEnumerable<Procedure> procedureList = new List<Procedure>();
    Procedure? selectedProcedure = new();

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        selectedBusinessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetMainStageList()
    {
        var _stageMainList = await ApproveStageService.GetAllProcdureWithMain(selectedBusinessUnit?.BusinessUnitId);
        stageMainList = _stageMainList.ToList();
    }


    async Task BusinessUnitChanged(BusinessUnit businessUnit)
    {
        AppState.Loading = true;
        selectedBusinessUnit = businessUnit;
        await GetMainStageList();
        AppState.Loading = false;
    }

    async Task LoadProcdureNameByApproveMainId()
    {
        selectedProcedure = await ApproveStageService.GetProcuderByStageMainId(selectedBusinessUnit?.BusinessUnitId);
    }
    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        selectedProcedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }
    async Task LoadData()
    {
        AppState.Loading = true;
        await GetBusinessUnitList();
        await GetMainStageList();
        await LoadProcdureNameByApproveMainId();
        await GetProcedureList();
        AppState.Loading = false;
    }


    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }



    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as ApproveStageMain;
        GoToDetails(argsItem.ApproveStageMainId);
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/liststage?id={id}");  /////
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    void SaveClick()
    {
        var res = ApproveStageService.Save(stageMainList);
        NavigationManager.NavigateTo("/listcompany");
    }

    void AddClick()
    {
        NavigationManager.NavigateTo($"/listcompany/generate?bu={selectedBusinessUnit.BusinessUnitId}");
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
        AppState.OnAddClick -= AddClick;

    }
    void UpdateHandler(){

    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;
        AppState.AddButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
        AppState.OnAddClick += AddClick;
    }
}