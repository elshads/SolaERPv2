@page "/listcompany"

@implements IDisposable

@inject ApproveStageService ApproveStageService

<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@businessUnitList"
                      Item="@businessUnit"
                      ItemChanged="@BusinessUnitChanged"
                      UniqueField="BusinessUnitId"
                      TextField="BusinessUnitCode"
                      TValue="int"
                      TItem="BusinessUnit"
                      SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>

<DataGrid @bind-Data="@stageMainList"
          ShowCheckBoxColumn="false"
          ShowToolbar="false"
          ShowSearchBar="false"
          Height="calc(100vh - 285px)"
          OnRowDoubleClick="@OnRowDoubleClickHandler">
    <DataGridColumns>
        <GridColumn Field="@(nameof(ApproveStageMain.ApproveStageName))" Title="Approve Stage Name">
            <Template>
            @{
                var selectItem = context as ApproveStageMain;
            }
                <LinkText OnClick="@(() => GoToDetails(selectItem.ApproveStageMainId))">
                    @selectItem.ApproveStageName
                </LinkText>
            </Template>

        </GridColumn>



        <GridColumn Field=@nameof(ApproveStageMain.Procedure.ProcedureName) Title="Procedure Name"/>

    </DataGridColumns>
</DataGrid>

@code{
    [CascadingParameter] public AppState? AppState { get; set; }

    List<ApproveStageMain> stageMainList = new();
    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    IEnumerable<Procedure> procedureList = new List<Procedure>();

    ApproveStageMain? stageMain = new();
    BusinessUnit? businessUnit = new();
    Procedure? procedure = new();

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        businessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        procedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }

    async Task GetMainStageList()
    {
        var _stageMainList = await ApproveStageService.ApproveStageMainLoad(businessUnit?.BusinessUnitId);
        stageMainList = _stageMainList.ToList();
    }

    async Task BusinessUnitChanged(BusinessUnit businessUnitChanged)
    {
        AppState.Loading = true;
        businessUnit = businessUnitChanged;
        await GetMainStageList();
        AppState.Loading = false;
    }

    async Task LoadData()
    {
        AppState.Loading = true;
        await GetBusinessUnitList();
        await GetMainStageList();
        await GetProcedureList();
        AppState.Loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as ApproveStageMain;
        GoToDetails(argsItem.ApproveStageMainId);
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/liststage?id={id}");
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    void NewClick()
    {
        NavigationManager.NavigateTo($"/liststage");
    }

    void IDisposable.Dispose()
    {
        AppState.OnCustomButton01Click -= NewClick;
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();


        AppState.CustomButton01Visible = true;
        AppState.CustomButton01Title = "New";
        AppState.CustomButton01Icon = "plus";
        AppState.OnCustomButton01Click += NewClick;
    }
}