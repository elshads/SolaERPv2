@page "/listcompany"

@implements IDisposable

@inject ApproveStageService ApproveStageService

<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@businessUnitList"
                      Item="@selectedBusinessUnit"
                      ItemChanged="@BusinessUnitChanged"
                      UniqueField="BusinessUnitId"
                      TextField="BusinessUnitCode"
                      TValue="int"
                      TItem="BusinessUnit"
                      SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>

<DataGrid Data="@stageMainList"
          CanAdd="true"
          CanEdit="true"
          CanDelete="true"
          CanExport="true"
          Height="calc(100vh - 285px)"
          ShowSearchBar="true"
          OnRowDoubleClick="@OnRowDoubleClickHandler"
          SearchFields="@(new List<string> {"ApproveStageName", "ApproveStageName"})">
    <DataGridColumns>
        <GridColumn Field="@(nameof(ApproveStageMain.ApproveStageName))" Title="Approve Stage Name" />
        <GridColumn Field="@(nameof(ApproveStageMain.Procedure.ProcedureName))" Title="Procedure Name" />
    </DataGridColumns>
</DataGrid>

@code{
    [CascadingParameter] public AppState? AppState { get; set; }

    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    BusinessUnit? selectedBusinessUnit = new();

    //IEnumerable<Procedure> procedureList = new List<Procedure>();

    List<ApproveStageMain> stageMainList = new();
    List<Procedure> procedureList = new();


    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        selectedBusinessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetMainStageList()
    {
        var _stageMainList = await ApproveStageService.ApproveStageMainLoad(selectedBusinessUnit?.BusinessUnitId);
        stageMainList = _stageMainList.ToList();
    }

    async Task GetProcedureList()
    {
        var _procedrueList = await ApproveStageService.GetProcedures();
        procedureList = _procedrueList.ToList();
    }

    async Task BusinessUnitChanged(BusinessUnit businessUnit)
    {
        AppState.Loading = true;
        selectedBusinessUnit = businessUnit;
        await GetMainStageList();
        AppState.Loading = false;
    }

    async Task LoadData()
    {
        AppState.Loading = true;
        await GetBusinessUnitList();
        await GetMainStageList();
        await GetProcedureList();
        AppState.Loading = false;
    }


    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }



    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as ApproveStageMain;
        GoToDetails(argsItem.ApproveStageMainId);
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/liststage?id={id}");  /////
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    void SaveClick()
    {
        NavigationManager.NavigateTo("/");
    }

    void AddClick()
    {
        //NavigationManager.NavigateTo($"/payments/generate?bu={selectedBusinessUnit.BusinessUnitId}");
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
        AppState.OnAddClick -= AddClick;

    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;
        AppState.AddButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
        AppState.OnAddClick += AddClick;
    }
}