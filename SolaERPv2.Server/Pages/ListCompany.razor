@page "/listcompany"

@implements IDisposable

@inject MainCompanyService _mainCompanyService
@inject CustomerService _customerService


@using Model=Customer

<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@mainCompanyList"
                      Item="@selectedMainCompany"
                      ItemChanged="@MainCompanyChanged"
                      UniqueField="MainCompanyId"
                      TextField="UnitName"
                      TValue="int"
                      TItem="MainCompany"
                      SearchFields="@(new List<string> { "UnitCode", "UnitName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>

<DataGrid Data="@modelList"
          CanAdd="true"
          CanEdit="true"
          CanDelete="true"
          CanExport="true"
          Height="calc(100vh - 285px)"
          ShowSearchBar="true"
          OnRowDoubleClick="@OnRowDoubleClickHandler"
          SearchFields="@(new List<string> {"Name", "Description"})">
    <DataGridColumns>
        <GridColumn Field="@(nameof(Customer.Name))" Title="Name"  />
        <GridColumn Field="@(nameof(Customer.Description))" Title="Description"  />
    </DataGridColumns>
</DataGrid>


@code {
    [CascadingParameter] public AppState? AppState { get; set; }

    IEnumerable<MainCompany>? mainCompanyList = new List<MainCompany>();
    MainCompany? selectedMainCompany = new();

    List<Model> modelList = new();
    IEnumerable<Model> selectedModelList = new List<Model>();
    IEnumerable<Model> selectedItems = new List<Model>();

    Model? selectedModel;


    async Task LoadData()
    {
        AppState.Loading = true;
        await GetMainCompanyList();
        await GetCustomerList();
        AppState.Loading = false;
    }

    async Task MainCompanyChanged(MainCompany mainCompany)
    {
        AppState.Loading = true;
        selectedMainCompany = mainCompany;
        await GetCustomerList();
        AppState.Loading = false;
    }

    async Task GetMainCompanyList()
    {
        mainCompanyList = await _mainCompanyService.GetAllAsync();
        selectedMainCompany = mainCompanyList.Any() ? mainCompanyList.FirstOrDefault() : new();
    }

    async Task GetCustomerList()
    {
       
        var _modelList = await _customerService.GetAll(selectedMainCompany?.MainCompanyId);
        modelList = _modelList.ToList();
    }



    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;

        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += SaveClick;
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as Model;
        GoToDetails(argsItem.CustomerId);
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/liststage?id={id}");
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= SaveClick;
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    async void SaveClick()
    {
        //var validated = Validate();
        //if (validated)
        //{
        //    var sqlResult = await _companyService.Save(company);
        //    if (sqlResult.QueryResultMessage == null)
        //    {
        //        AppState.ShowAlert("Company successfully saved", Severity.Success);
        //    }
        //    else
        //    {
        //        AppState.ShowAlert(sqlResult.QueryResultMessage, Severity.Error);
        //    }
        //}
    }

    bool Validate()
    {
        return true;
    }
}