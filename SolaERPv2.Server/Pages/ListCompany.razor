@page "/listcompany"

@implements IDisposable

@inject ApproveStageService ApproveStageService

<div class="k-pb-4">
    <label for="bu_list">Business Unit:</label>
    <ItemDropDownList Id="bu_list"
                      Data="@businessUnitList"
                      Item="@selectedBusinessUnit"
                      ItemChanged="@BusinessUnitChanged"
                      UniqueField="BusinessUnitId"
                      TextField="BusinessUnitCode"
                      TValue="int"
                      TItem="BusinessUnit"
                      SearchFields="@(new List<string> { "BusinessUnitCode", "BusinessUnitName"})"
                      Width="300px"
                      PopupWidth="100%"
                      PopupMaxWidth="500px" />
</div>

<DataGrid @bind-Data="@stageMainList"
          ShowCheckBoxColumn="false"
          ShowToolbar="false"
          ShowSearchBar="false"
          Height="calc(100vh - 285px)"
          OnRowDoubleClick="@OnRowDoubleClickHandler">
    <DataGridColumns>
        <GridColumn Field="@(nameof(ApproveStageMain.ApproveStageName))" Title="Approve Stage Name">
            <Template>
            @{
                var selectItem = context as ApproveStageMain;
            }
                <LinkText OnClick="@(() => GoToDetails(selectItem.ApproveStageMainId))">
                    @selectItem.ApproveStageName
                </LinkText>
            </Template>

        </GridColumn>



        <GridColumn Field=@nameof(ApproveStageMain.Procedure.ProcedureName) Title="Procedure Name">     
            <EditorTemplate>
                @{
                        selectedMain = context as ApproveStageMain;
                        <TelerikComboBox @bind-Value="@selectedMain.ProcedureId"
                                     Id="bu_list"
                                     Data="@procedureList"
                                     TextField="ProcedureName"
                                     ValueField="ProcedureId"
                                     Placeholder="Select..."
                                     Filterable="true"
                                     FilterOperator="StringFilterOperator.Contains" />
                 }     
            </EditorTemplate>
        </GridColumn>

    </DataGridColumns>
</DataGrid>


@*<TelerikGrid Data=@stageMainList EditMode="@GridEditMode.None"
             Height="500px"
             Sortable="true"
             Pageable="true"
             OnRowDoubleClick="@OnRowDoubleClickHandler"
             SelectionMode="@GridSelectionMode.Single">
    <GridColumns>
        <GridColumn Field=@nameof(ApproveStageMain.ApproveStageName) Title="ApproveStage Name" />
        <GridColumn Field=@nameof(ApproveStageMain.Procedure.ProcedureName) Title="Procedure Name" />
    </GridColumns>
</TelerikGrid>
*@

@code{
    [CascadingParameter] public AppState? AppState { get; set; }


    IEnumerable<BusinessUnit> businessUnitList = new List<BusinessUnit>();
    BusinessUnit? selectedBusinessUnit = new();

    ApproveStageMain? selectedMain = new();
    ApproveStageMain? approveStageMain = new ApproveStageMain();

    List<ApproveStageMain> stageMainList = new();


    IEnumerable<Procedure> procedureList = new List<Procedure>();
    Procedure? selectedProcedure = new();

    async Task GetBusinessUnitList()
    {
        businessUnitList = await BusinessUnitService.GetAllAsync();
        selectedBusinessUnit = businessUnitList.Any() ? businessUnitList.FirstOrDefault() : new();
    }

    async Task GetProcedureList()
    {
        procedureList = await ApproveStageService.GetProcedures();
        selectedProcedure = procedureList.Any() ? procedureList.FirstOrDefault() : new();
    }

    async Task GetMainStageList()
    {
        var _stageMainList = await ApproveStageService.ApproveStageMainLoad(selectedBusinessUnit?.BusinessUnitId);
        stageMainList = _stageMainList.ToList();
    }


    async Task BusinessUnitChanged(BusinessUnit businessUnit)
    {
        AppState.Loading = true;
        selectedBusinessUnit = businessUnit;
        await GetMainStageList();
        AppState.Loading = false;
    }


    async Task LoadData()
    {
        AppState.Loading = true;
        await GetBusinessUnitList();
        await GetMainStageList();
        await GetProcedureList();
        AppState.Loading = false;
    }


    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }



    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as ApproveStageMain;
        GoToDetails(argsItem.ApproveStageMainId);
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/liststage?id={id}");  /////
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }



    void NewClick()
    {
        NavigationManager.NavigateTo($"/liststage");
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnCustomButton01Click -= NewClick;
        //AppState.OnCustomButton02Click -= EditClick;
        //AppState.OnCustomButton03Click -= DeleteClick ;
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();

        AppState.BackButtonVisible = true;
        AppState.OnBackClick += BackClick;


        AppState.CustomButton01Visible = true;
        AppState.CustomButton01Title = "New";
        AppState.CustomButton01Icon = "plus";
        AppState.OnCustomButton01Click += NewClick;

        //AppState.CustomButton02Visible = true;
        //AppState.CustomButton02Title = "Edit";
        //AppState.CustomButton02Icon = "pencil";
        //AppState.OnCustomButton02Click += EditClick;

        //AppState.CustomButton03Visible = true;
        //AppState.CustomButton03Title = "Delete";
        //AppState.CustomButton03Icon = "trash";
        //AppState.OnCustomButton03Click += DeleteClick;

    }
}