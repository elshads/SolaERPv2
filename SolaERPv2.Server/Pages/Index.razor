@page "/"
@implements IDisposable
@using Model = BaseModel

<PageTitle>Index</PageTitle>


<h3>Attachment max file size (1 - 1024 MB)</h3>
<div class="k-mb-8" style="width: 240px">
    <TelerikNumericTextBox Value="@maxFileSize" ValueChanged="MaxFileSizeChanged" Min="1" Max="1024" T="int" Decimals="0"/>
</div>

<h3 class="k-mb-2">Test email</h3>
<div class="k-mb-2">
    <span>Email address(es - comma separated)</span>
    <TelerikTextBox @bind-Value="@emailAddress"/>
</div>

<div class="k-mb-2">
    <span>Subject</span>
    <TelerikTextBox @bind-Value="@emailSubject"/>
</div>

<div class="k-mb-2">
    <span>Destination</span>
    <TelerikTextBox @bind-Value="@destination"/>
</div>

<div class="k-mb-2">
    <span>DocumentNumber</span>
    <TelerikTextBox @bind-Value="@documentNumber"/>
</div>

<TelerikButton OnClick="@SendEmail">Send email</TelerikButton>


@code {
    [CascadingParameter] public AppState AppState { get; set; }

    int maxFileSize => AppSettings.MaxFileSize / 1024 / 1024;

    string? emailAddress = "";
    string? emailSubject = "";
    string? emailBody = "";
    string? destination = "";
    string? documentNumber = "";

    protected override void OnInitialized()
    {
        OnAppStateInitialized();
    }

    void OnAppStateInitialized()
    {
        AppState.SetDefaults();
    }

    void IDisposable.Dispose()
    {

    }

    void MaxFileSizeChanged(int value)
    {
        AppSettings.MaxFileSize = value * 1024 * 1024;
    }

    async Task SendEmail(MouseEventArgs args)
    {
        if (emailAddress?.Length > 0)
        {
            AppState.Loading = true;
            var addresses = emailAddress.Replace(";", ",").Split(",");
            var mailSent = await MailService.SendApprovalMail(addresses, emailSubject, SessionData.CurrentUser.FullName, SessionData.CurrentUser.UserName, destination, documentNumber);
            AppState.Loading = false;
            if (mailSent)
            {
                AppState.ShowAlert($"Email successfully sent to {emailAddress}", Severity.Success);
            }
            else
            {
                AppState.ShowAlert("Could not send an email", Severity.Error);
            }
        }
        else
        {
            AppState.ShowAlert("email is mandatory", Severity.Error);
        }
    }
}