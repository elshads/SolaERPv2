@page "/groups/card"

@implements IDisposable
@inject GroupService GroupService
@inject MenuService MenuService
@using Model = Group


<TelerikForm EditContext="@editContext"
             ValidationMessageType="FormValidationMessageType.Inline"
             Columns="@(AppState.MobileView ? 1 : 2)"
             ColumnSpacing="1rem">
    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </FormValidation>
    <FormItems>
        <FormItem Field="@nameof(Model.GroupName)" LabelText="Name"></FormItem>
        <FormItem Field="@nameof(Model.Description)" LabelText="Description"></FormItem>
    </FormItems>
    <FormButtons />
</TelerikForm>


<TelerikTabStrip @bind-ActiveTabIndex="@activeTabIndex">
    <TabStripTab Title="Users">
        <HeaderTemplate>
            <MudIcon Icon="@Icons.Filled.AccountCircle" />
            <span class="k-pl-2">
                @if (AppState.MobileView)
                {
                    <MudIcon Icon="@Icons.Filled.Circle" Style="font-size: 0.5rem;" Color="@(activeTabIndex == 0 ? Color.Success : Color.Transparent)" />
                }
                else
                {
                    <div>Users</div>
                }
            </span>
        </HeaderTemplate>
        <Content>
            <DoubleGrid Height="calc(100vh - 340px)" @bind-LeftGridData="currentModel.Users" @bind-RightGridData="allUsers" LeftGridTitle="Group Users" RightGridTitle="All Users" SearchFields="@(new List<string> {"FullName", "UserName"})">
                <GridColumn Field="@(nameof(AppUser.FullName))" Title="Name" />
                <GridColumn Field="@(nameof(AppUser.UserName))" Title="UserName" />
            </DoubleGrid>
        </Content>
    </TabStripTab>

    <TabStripTab Title="BusinessUnits">
        <HeaderTemplate>
            <MudIcon Icon="@Icons.Filled.Business" />
            <span class="k-pl-2">
                @if (AppState.MobileView)
                {
                    <MudIcon Icon="@Icons.Filled.Circle" Style="font-size: 0.5rem;" Color="@(activeTabIndex == 1 ? Color.Success : Color.Transparent)" />
                }
                else
                {
                    <div>Business Units</div>
                }
            </span>
        </HeaderTemplate>
        <Content>
            <DoubleGrid Height="calc(100vh - 340px)" @bind-LeftGridData="currentModel.BusinessUnits" @bind-RightGridData="allBusinessUnits" LeftGridTitle="Group Business Units" RightGridTitle="All Business Units" SearchFields="@(new List<string> {"BusinessUnitCode", "BusinessUnitName"})">
                <GridColumn Field="@(nameof(BusinessUnit.BusinessUnitCode))" Title="Code" />
                <GridColumn Field="@(nameof(BusinessUnit.BusinessUnitName))" Title="Name" />
            </DoubleGrid>
        </Content>
    </TabStripTab>

    <TabStripTab Title="Units">
        <HeaderTemplate>
            <MudIcon Icon="@Icons.Filled.Category" />
            <span class="k-pl-2">
                @if (AppState.MobileView)
                {
                    <MudIcon Icon="@Icons.Filled.Circle" Style="font-size: 0.5rem;" Color="@(activeTabIndex == 2 ? Color.Success : Color.Transparent)" />
                }
                else
                {
                    <div>Units</div>
                }
            </span>
        </HeaderTemplate>
        <Content>
            @*<DoubleGrid @bind-LeftGridData="groupUnits" @bind-RightGridData="allUnits" LeftGridTitle="Group Units" RightGridTitle="All Units" SearchFields="@(new List<string> {"UnitCode", "UnitName"})">
                <GridColumn Field="@(nameof(Unit.UnitCode))" Title="Code"/>
                <GridColumn Field="@(nameof(Unit.UnitName))" Title="Name"/>
                </DoubleGrid>*@
        </Content>
    </TabStripTab>

    <TabStripTab Title="Approve Roles">
        <HeaderTemplate>
            <MudIcon Icon="@Icons.Filled.Groups" />
            <span class="k-pl-2">
                @if (AppState.MobileView)
                {
                    <MudIcon Icon="@Icons.Filled.Circle" Style="font-size: 0.5rem;" Color="@(activeTabIndex == 3 ? Color.Success : Color.Transparent)" />
                }
                else
                {
                    <div>Approve Roles</div>
                }
            </span>
        </HeaderTemplate>
        <Content>
            content goes here
        </Content>
    </TabStripTab>

    <TabStripTab Title="Menus">
        <HeaderTemplate>
            <MudIcon Icon="@Icons.Filled.Menu" />
            <span class="k-pl-2">
                @if (AppState.MobileView)
                {
                    <MudIcon Icon="@Icons.Filled.Circle" Style="font-size: 0.5rem;" Color="@(activeTabIndex == 4 ? Color.Success : Color.Transparent)" />
                }
                else
                {
                    <div>Menus</div>
                }
            </span>
        </HeaderTemplate>
        <Content>
            <TelerikTreeList Data="@allMenuItems"
                             IdField="@(nameof(Menu.MenuId))"
                             ParentIdField="@(nameof(Menu.ParentId))"
                             Height="calc(100vh - 340px)">
                <TreeListColumns>
                    <TreeListColumn Field="@(nameof(Menu.MenuName))" Title="Menu" Expandable="true"></TreeListColumn>
                    <TreeListColumn Field="@(nameof(Menu.CreateAccess))" Title="Create" Width="70px" TextAlign="ColumnTextAlign.Center">
                        <Template>
                            @{
                                selectedMenu = (context as Menu);
                                <div class="@(selectedMenu.ParentId == null ? "bg-warning" : "")"><TelerikCheckBox @bind-Value="@selectedMenu.CreateAccess" Enabled="true" OnChange="@(() => CreateAccessChanged(selectedMenu))" /></div>
                            }
                        </Template>
                    </TreeListColumn>
                    <TreeListColumn Field="@(nameof(Menu.EditAccess))" Title="Edit" Width="70px" TextAlign="ColumnTextAlign.Center">
                        <Template>
                            @{
                                selectedMenu = (context as Menu);
                                <div class="@(selectedMenu.ParentId == null ? "bg-warning" : "")"><TelerikCheckBox @bind-Value="@selectedMenu.EditAccess" Enabled="true" OnChange="@(() => EditAccessChanged(selectedMenu))" /></div>
                            }
                        </Template>
                    </TreeListColumn>
                    <TreeListColumn Field="@(nameof(Menu.DeleteAccess))" Title="Delete" Width="70px" TextAlign="ColumnTextAlign.Center">
                        <Template>
                            @{
                                selectedMenu = (context as Menu);
                                <div class="@(selectedMenu.ParentId == null ? "bg-warning" : "")"><TelerikCheckBox @bind-Value="@selectedMenu.DeleteAccess" Enabled="true" OnChange="@(() => DeleteAccessChanged(selectedMenu))" /></div>
                            }
                        </Template>
                    </TreeListColumn>
                    <TreeListColumn Field="@(nameof(Menu.ExportAccess))" Title="Export" Width="70px" TextAlign="ColumnTextAlign.Center">
                        <Template>
                            @{
                                selectedMenu = (context as Menu);
                                <div class="@(selectedMenu.ParentId == null ? "bg-warning" : "")"><TelerikCheckBox @bind-Value="@selectedMenu.ExportAccess" Enabled="true" OnChange="@(() => ExportAccessChanged(selectedMenu))" /></div>
                            }
                        </Template>
                    </TreeListColumn>
                </TreeListColumns>
            </TelerikTreeList>
        </Content>
    </TabStripTab>
</TelerikTabStrip>



@code {
    [CascadingParameter] public AppState? AppState { get; set; }
    [CascadingParameter] public DialogFactory? Dialogs { get; set; }

    int modelId = 0;
    Model? currentModel = new();
    EditContext? editContext = new(new Model());

    List<AppUser>? allUsers = new();
    List<BusinessUnit>? allBusinessUnits = new();
    List<Menu>? allMenuItems = new();

    Menu? selectedMenu = new();

    int activeTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        SetQueryVariables();
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        AppState?.SetDefaults();
        AppState.BackButtonVisible = true;
        AppState.OnBackClick += BackClick;
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
    }

    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            modelId = Convert.ToInt32(_id);
        }
    }

    async Task LoadData()
    {
        currentModel = modelId > 0 ? await GroupService.GetByIdAsync(modelId) : new();
        var _allUsers = await AppUserService.GetAllAsync();
        allUsers = _allUsers.ToList();
        var _allBusinessUnits = await BusinessUnitService.GetAllAsync();
        allBusinessUnits = _allBusinessUnits.ToList();
        await GetMenuItems();
        editContext = new EditContext(currentModel);
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/groups");
    }

    async Task GetMenuItems()
    {
        var _allMenuItems = await MenuService.GetAllAsync(false);
        allMenuItems = _allMenuItems?.ToList();
        if (currentModel?.Menus != null && currentModel.Menus.Any() && allMenuItems.Any())
        {
            foreach (var item in currentModel.Menus)
            {
                var index = allMenuItems.FindIndex(e => e.MenuId == item.MenuId);
                if (index > -1)
                {
                    allMenuItems[index].CreateAccess = item.CreateAccess;
                    allMenuItems[index].EditAccess = item.EditAccess;
                    allMenuItems[index].DeleteAccess = item.DeleteAccess;
                    allMenuItems[index].ExportAccess = item.ExportAccess;
                }
            }
        }
    }

    void CreateAccessChanged(Menu menu)
    {
        if (menu.ParentId == null)
        {
            var children = allMenuItems.Where(e => e.ParentId == menu.MenuId);
            if (children.Any())
            {
                foreach (var item in children)
                {
                    var childIndex = allMenuItems.FindIndex(e => e.MenuId == item.MenuId);
                    if (childIndex > -1)
                    {
                        allMenuItems[childIndex].CreateAccess = menu.CreateAccess;
                    }
                }
            }
        }
        else
        {
            var hasAccess = allMenuItems.Where(e => e.ParentId == menu.ParentId).Any(e => e.CreateAccess);
            var parentIndex = allMenuItems.FindIndex(e => e.MenuId == menu.ParentId);
            if (parentIndex > -1)
            {
                allMenuItems[parentIndex].CreateAccess = hasAccess;
            }
        }
    }

    void EditAccessChanged(Menu menu)
    {
        if (menu.ParentId == null)
        {
            var children = allMenuItems.Where(e => e.ParentId == menu.MenuId);
            if (children.Any())
            {
                foreach (var item in children)
                {
                    var childIndex = allMenuItems.FindIndex(e => e.MenuId == item.MenuId);
                    if (childIndex > -1)
                    {
                        allMenuItems[childIndex].EditAccess = menu.EditAccess;
                    }
                }
            }
        }
        else
        {
            var hasAccess = allMenuItems.Where(e => e.ParentId == menu.ParentId).Any(e => e.EditAccess);
            var parentIndex = allMenuItems.FindIndex(e => e.MenuId == menu.ParentId);
            if (parentIndex > -1)
            {
                allMenuItems[parentIndex].EditAccess = hasAccess;
            }
        }
    }

    void DeleteAccessChanged(Menu menu)
    {
        if (menu.ParentId == null)
        {
            var children = allMenuItems.Where(e => e.ParentId == menu.MenuId);
            if (children.Any())
            {
                foreach (var item in children)
                {
                    var childIndex = allMenuItems.FindIndex(e => e.MenuId == item.MenuId);
                    if (childIndex > -1)
                    {
                        allMenuItems[childIndex].DeleteAccess = menu.DeleteAccess;
                    }
                }
            }
        }
        else
        {
            var hasAccess = allMenuItems.Where(e => e.ParentId == menu.ParentId).Any(e => e.DeleteAccess);
            var parentIndex = allMenuItems.FindIndex(e => e.MenuId == menu.ParentId);
            if (parentIndex > -1)
            {
                allMenuItems[parentIndex].DeleteAccess = hasAccess;
            }
        }
    }

    void ExportAccessChanged(Menu menu)
    {
        if (menu.ParentId == null)
        {
            var children = allMenuItems.Where(e => e.ParentId == menu.MenuId);
            if (children.Any())
            {
                foreach (var item in children)
                {
                    var childIndex = allMenuItems.FindIndex(e => e.MenuId == item.MenuId);
                    if (childIndex > -1)
                    {
                        allMenuItems[childIndex].ExportAccess = menu.ExportAccess;
                    }
                }
            }
        }
        else
        {
            var hasAccess = allMenuItems.Where(e => e.ParentId == menu.ParentId).Any(e => e.ExportAccess);
            var parentIndex = allMenuItems.FindIndex(e => e.MenuId == menu.ParentId);
            if (parentIndex > -1)
            {
                allMenuItems[parentIndex].ExportAccess = hasAccess;
            }
        }
    }
}
