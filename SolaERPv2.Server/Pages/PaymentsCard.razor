@page "/payments/card"

@implements IDisposable
@inject PaymentDocumentService PaymentDocumentService
@inject ApproveStageService ApproveStageService
@using Model = PaymentDocumentDetail


<PageTitle>Payment Document</PageTitle>


<MudCard Class="k-mb-4">
    <MudCardContent>
        <TelerikGridLayout RowSpacing="8px" ColumnSpacing="16px" VerticalAlign="GridLayoutVerticalAlign.Top">
            <GridLayoutItems>
                <GridLayoutItem Row="1" Column="1">
                    <ReadOnlyField Value="@(paymentDocumentMain.BusinessUnitCode)" Label="Business Unit: " />
                </GridLayoutItem>
                <GridLayoutItem Row="@(!AppState.MobileView ? 1 : 2)" Column="@(!AppState.MobileView ? 2 : 1)">
                    <ReadOnlyField Value="@($"{paymentDocumentMain?.VendorCode} / {paymentDocumentMain?.VendorName}")" Label="Vendor: " />
                </GridLayoutItem>
                <GridLayoutItem Row="@(!AppState.MobileView ? 1 : 3)" Column="@(!AppState.MobileView ? 3 : 1)">
                    <ReadOnlyField Value="@($"{paymentDocumentMain.VendorBalance.ToString("N3")} {paymentDocumentMain?.CurrencyCode}")" Label="Vendor's Balance: " />
                </GridLayoutItem>
                <GridLayoutItem Row="@(!AppState.MobileView ? 1 : 4)" Column="@(!AppState.MobileView ? 4 : 1)">
                    <ReadOnlyField Value="@($"{paymentDocumentMain.CreatedDate.ToString("yyyy-MM-dd")} {paymentDocumentMain.CreatedUser}")" Label="Created On/By: " />
                </GridLayoutItem>
                <GridLayoutItem Row="@(!AppState.MobileView ? 1 : 5)" Column="@(!AppState.MobileView ? 5 : 1)">
                    <ReadOnlyField Value="@("--potype")" Label="PO Type: " />
                </GridLayoutItem>
            </GridLayoutItems>
        </TelerikGridLayout>
    </MudCardContent>
</MudCard>

<TelerikGridLayout RowSpacing="8px" ColumnSpacing="16px" VerticalAlign="GridLayoutVerticalAlign.Top">
    <GridLayoutColumns>
        <GridLayoutColumn Width="140px" />
        <GridLayoutColumn Width="280px" />
        <GridLayoutColumn Width="240px" />
        <GridLayoutColumn />
    </GridLayoutColumns>
    <GridLayoutItems>
        <GridLayoutItem Row="1" Column="1">
            <label class="k-input-label pb-1" for="attachment-type">Payment:</label>
            <ItemRadioGroup Id="attachment-type"
                            Data="@attachmentTypeList"
                            Item="@selectedAttachmentType"
                            ItemChanged="@AttachmentTypeChanged"
                            UniqueField="AttachmentTypeId"
                            TextField="AttachmentTypeName"
                            TItem="AttachmentType"
                            TValue="int"
                            Layout="RadioGroupLayout.Vertical">
            </ItemRadioGroup>
        </GridLayoutItem>
        <GridLayoutItem Row="1" Column="2">
            <div class="attachment-subtype">
                <TelerikGrid Data="@attachmentSubTypeList"
                             Height="205px"
                             Width="260px"
                             Sortable="false"
                             Groupable="false"
                             Resizable="false"
                             Reorderable="false"
                             SelectionMode="GridSelectionMode.None">
                    <GridColumns>
                        <GridColumn Field="@(nameof(AttachmentSubType.AttachmentSubTypeId))" Title="Id" Visible="false" />
                        <GridColumn Field="@(nameof(AttachmentSubType.HasItems))" Title="Files" Width="55px">
                            <Template>
                                @{
                                    var rowContext = context as AttachmentSubType;
                                    var hasItems = paymentDocumentMain?.AttachmentList?.Any(e => e.AttachmentSubTypeId == rowContext.AttachmentSubTypeId);
                                    <TelerikCheckBox Value="@hasItems" Enabled="false"></TelerikCheckBox>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@(nameof(AttachmentSubType.AttachmentSubTypeName))" Title="Type">
                            <Template>
                                @{
                                    var rowContext = context as AttachmentSubType;
                                    <LinkText OnClick="@(() => AttachmentSubTypeClick(rowContext))">@(rowContext.AttachmentSubTypeName)</LinkText>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </TelerikGrid>
            </div>
        </GridLayoutItem>
        <GridLayoutItem Row="@(!AppState.MobileView ? 1 : 2)" Column="@(!AppState.MobileView ? 3 : 1)" ColumnSpan="@(!AppState.MobileView ? 1 : 2)">
            <div class="k-pb-3">
                <label class="k-input-label k-pb-1" for="expensecode">Expense Code:</label>
                <GridComboBox @bind-Value="@paymentDocumentMain.ExpenseCode"
                              Id="expensecode"
                              Data="@expenseAnalysisList"
                              TextField="AnalysisCode"
                              ValueField="AnalysisCode"
                              SearchFields="@(new List<string> {"AnalysisCode"})"
                              ShowHeader="false" />
            </div>
            <div class="k-pb-3">
                <label class="k-input-label k-pb-1" for="groupproject">Group Project:</label>
                <GridComboBox @bind-Value="@paymentDocumentMain.GroupProject"
                              Id="groupproject"
                              Data="@groupProjectAnalysisList"
                              TextField="AnalysisCode"
                              ValueField="AnalysisCode"
                              SearchFields="@(new List<string> {"AnalysisCode"})"
                              ShowHeader="false" />
            </div>
            <div class="k-pb-3">
                <label class="k-input-label k-pb-1" for="project">Project:</label>
                <GridComboBox @bind-Value="@paymentDocumentMain.Project"
                              Id="project"
                              Data="@projectAnalysisList"
                              TextField="AnalysisCode"
                              ValueField="AnalysisCode"
                              SearchFields="@(new List<string> {"AnalysisCode"})"
                              ShowHeader="false" />
            </div>
        </GridLayoutItem>
        <GridLayoutItem Row="@(!AppState.MobileView ? 1 : 3)" Column="@(!AppState.MobileView ? 4 : 1)" ColumnSpan="@(!AppState.MobileView ? 1 : 2)">
            <div class="flex-center-y k-mb-2">
                <span class="column-3-label">Reference:</span>
                <TelerikTextBox @bind-Value="@paymentDocumentMain.Reference" Title="Reference" PlaceHolder="Type here..."></TelerikTextBox>
            </div>
            <div class="flex-center-y k-mb-2">
                <span class="column-3-label">Comment:</span>
                <TelerikTextBox Id="comment" @bind-Value="@paymentDocumentMain.Comment" Title="Comment" PlaceHolder="Type here..."></TelerikTextBox>
            </div>
            <div class="flex-center-y k-mb-2">
                <span class="column-3-label">Priority:</span>
                <ItemRadioGroup Id="priority_radio"
                                Data="@paymentDocumentPriorityList"
                                Item="@selectedPaymentDocumentPriority"
                                ItemChanged="@PaymentDocumentPriorityChanged"
                                UniqueField="PaymentDocumentPriorityId"
                                TextField="PaymentDocumentPriorityName"
                                TItem="PaymentDocumentPriority"
                                TValue="int"
                                Layout="RadioGroupLayout.Horizontal">
                </ItemRadioGroup>
            </div>
            <div class="flex-center-y k-mb-2">
                <ReadOnlyField Value="@(paymentDocumentMain.OrNumber)" Label="OR Number: " LabelClass="column-3-label" Class="k-mr-2" />
                <ReadOnlyField Value="@(paymentDocumentMain.JobNumber)" Label="Job Number: " LabelClass="column-3-label" />
            </div>
        </GridLayoutItem>
    </GridLayoutItems>
</TelerikGridLayout>

<div class="k-mt-2">
    <TelerikGridLayout RowSpacing="8px" ColumnSpacing="8px">
        <GridLayoutItems>
            <GridLayoutItem Row="1" Column="1" ColumnSpan="@(!AppState.MobileView? 2 : 1)">
                <DataGrid Title="Invoice lines"
                          @bind-Data="@paymentDocumentMain.PaymentDocumentDetailList"
                          ShowContextMenu="false"
                          ShowToolbar="false"
                          Pageable="false"
                          ShowCheckBoxColumn="false"
                          CheckBoxOnlySelection="false"
                          Width="@(AppState.MobileView ? "calc(100vw - 40px)" : AppState.OpenDrawer ? "calc(100vw - 280px)" : "calc(100vw - 104px)")"
                          Height="@(!AppState.MobileView ? "calc((100vh - 462px) / 2)" : "auto")"
                          SearchFields="@(new List<string> { "PONum", "Voucher"})">
                    <GridColumn Field="@(nameof(Model.VendorCode))" Title="Vendor Code" Width="130px" Visible="false" Editable="false" />
                    <GridColumn Field="@(nameof(Model.VendorName))" Title="Vendor Name" Width="135px" Visible="false" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PaymentDocumentTypeName))" Title="Document Type" Width="150px" Visible="false" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PONum))" Title="PO Num" Width="110px" Locked="true" Editable="false" />
                    <GridColumn Field="@(nameof(Model.Voucher))" Title="Voucher" Width="100px" Locked="true" Editable="false" />
                    <GridColumn Field="@(nameof(Model.POAmount))" Title="PO Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="120px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PO_VAT))" Title="PO VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="100px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.VoucherAmount))" Title="Voucher Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="154px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.VoucherVAT))" Title="Voucher VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="130px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.AdvanceAmount))" Title="Advance Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="157px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.AdvanceVAT))" Title="Advance VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="133px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PaidAmount))" Title="Paid Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="130px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PaidVAT))" Title="Paid VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="110px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PaymentDocumentAmount))" Title="Paym. Doc. Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="177px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.PaymentDocumentVAT))" Title="Paym. Doc. VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="155px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.AmountToPay))" Title="Amount To Pay" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="145px" Editable="true" />
                    <GridColumn Field="@(nameof(Model.VATToPay))" Title="VAT To Pay" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="122px" Editable="true" />
                    <GridColumn Field="@(nameof(Model.TotalToPay))" Title="Total To Pay" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="130px" Editable="false" />
                    <GridColumn Field="@(nameof(Model.IsVAT))" Title="VAT" TextAlign="ColumnTextAlign.Right" Width="75px" />
                </DataGrid>
            </GridLayoutItem>
            <GridLayoutItem Row="2" Column="1">
                <DataGrid Title="Summary"
                          Data="@poSummaryList"
                          ShowContextMenu="false"
                          ShowToolbar="false"
                          Pageable="false"
                          ShowCheckBoxColumn="false"
                          CheckBoxOnlySelection="false"
                          Width="@(AppState.MobileView ? "calc(100vw - 40px)" : AppState.OpenDrawer ? "calc((100vw - 288px) / 2)" : "calc((100vw - 112px) / 2)")"
                          Height="@(!AppState.MobileView ? "calc((100vh - 462px) / 2)" : "auto")"
                          SearchFields="@(new List<string> {"PONum"})"
                          AggregateFields="@(new List<string> {"POAmount", "PO_VAT", "AdvanceAmount", "AdvanceVAT", "PaidPaymentDocumentAmount", "PaidPaymentDocumentVAT", "AmountToPay", "VATToPay", "RemainingAmount", "RemainingVAT"})">
                    <GridColumn Field="@(nameof(Model.PONum))" Title="PO Num" Locked="true" Width="110px">
                        <FooterTemplate>
                            <div>Total:</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.POAmount))" Title="PO Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="120px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.PO_VAT))" Title="PO VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="100px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.AdvanceAmount))" Title="Advance Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="157px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.AdvanceVAT))" Title="Advance VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="133px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.PaidPaymentDocumentAmount))" Title="Paid Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="130px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.PaidPaymentDocumentVAT))" Title="Paid VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="110px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.AmountToPay))" Title="Amount To Pay" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="145px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.VATToPay))" Title="VAT To Pay" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="122px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.RemainingAmount))" Title="Remaining Amount" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="155px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Model.RemainingVAT))" Title="Remaining VAT" DisplayFormat="{0:N3}" TextAlign="ColumnTextAlign.Right" Width="145px">
                        <FooterTemplate>
                            <div class="text-right">@(context.Sum != null ? context.Sum?.ToString("N3") : "")</div>
                        </FooterTemplate>
                    </GridColumn>
                </DataGrid>
            </GridLayoutItem>
            <GridLayoutItem Row="@(!AppState.MobileView? 2 : 3)" Column="@(!AppState.MobileView? 2 : 1)">
                <DataGrid Title="Approval stages"
                          Data="@approveStageList"
                          ShowContextMenu="false"
                          ShowToolbar="false"
                          Pageable="false"
                          ShowCheckBoxColumn="false"
                          CheckBoxOnlySelection="true"
                          Width="@(AppState.MobileView ? "calc(100vw - 40px)" : AppState.OpenDrawer ? "calc((100vw - 288px) / 2)" : "calc((100vw - 112px) / 2)")"
                          Height="@(!AppState.MobileView ? "calc((100vh - 462px) / 2)" : "auto")"
                          SearchFields="@(new List<string> {"ApproveStageDetailsName", "FullName", "ApproveStatusName", "Comment"})">
                    <GridColumn Field="@(nameof(ApproveStage.ApproveStageDetailsName))" Title="Stage Name" Width="140px" />
                    <GridColumn Field="@(nameof(ApproveStage.Sequence))" Title="Sequence" Width="115px" />
                    <GridColumn Field="@(nameof(ApproveStage.FullName))" Title="Approver" Width="140px" />
                    <GridColumn Field="@(nameof(ApproveStage.ApproveStatusName))" Title="Approve Status" Width="145px" />
                    <GridColumn Field="@(nameof(ApproveStage.ApproveDate))" Title="Approve Date" TextAlign="ColumnTextAlign.Right" Width="135px">
                        <Template>
                            @{
                                var rowContext = context as ApproveStage;
                                <text>@(rowContext.ApproveDate > new DateTime(1, 1, 1) ? rowContext.ApproveDate.ToString("dd.MM.yyyy") : "n.a.")</text>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@(nameof(ApproveStage.Comment))" Title="Comment" Width="500px" />
                </DataGrid>
            </GridLayoutItem>

        </GridLayoutItems>
    </TelerikGridLayout>
</div>

<AttachmentContainer @bind-Visible="@showAttachmentSubType"
                     AttachmentList="@filteredAttachmentList"
                     AttachmentListChanged="@AddItemsToAttachmentList"
                     AttachmentTypeId="@selectedAttachmentType.AttachmentTypeId"
                     AttachmentSubTypeId="@selectedAttachmentSubType.AttachmentSubTypeId"
                     Title="@("- " + selectedAttachmentSubType.AttachmentSubTypeName)"
                     DocumentReference="@paymentDocumentMain.Reference"
                     SourceId="@paymentDocumentMain.PaymentDocumentMainId"
                     SourceTypeName="PYMDC"
                     OnDelete="@DeleteAttachmentHandler" />


@code {

    [CascadingParameter] AppState AppState { get; set; }

    int modelId = 0;
    PaymentDocumentMain paymentDocumentMain = new() { PaymentDocumentDetailList = new(), AttachmentList = new() { new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceA_20220402 SomeLongDescription here for test purposes.pdf" }, new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceB_20220402.pdf" }, new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceC_20220402.pdf" }, new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceD_20220402.pdf" }, new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceE_20220402.pdf" }, new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceF_20220402.pdf" }, new Attachment { AttachmentSubTypeId = 2, FileName = "InvoiceG_20220402.pdf" }, new Attachment { AttachmentSubTypeId = 6, FileName = "InvoiceH_20220402.pdf" } } };
    List<Attachment> filteredAttachmentList = new();
    PaymentDocumentDetail selectedPaymentDocumentDetail = new();

    IEnumerable<PaymentDocumentPriority> paymentDocumentPriorityList = PaymentDocumentPriority.PaymentDocumentPriorityList;
    PaymentDocumentPriority selectedPaymentDocumentPriority = PaymentDocumentPriority.PaymentDocumentPriorityList.FirstOrDefault(e => e.PaymentDocumentPriorityId == 2);

    IEnumerable<AttachmentType> attachmentTypeList = AttachmentType.AttachmentTypeList;
    AttachmentType selectedAttachmentType = AttachmentType.AttachmentTypeList.FirstOrDefault();

    List<PaymentDocumentDetail> poSummaryList = new();

    List<ApproveStage> approveStageList = new();

    List<AttachmentSubType> attachmentSubTypeList = AttachmentSubType.AttachmentSubTypeList.Where(e => AttachmentType.AttachmentTypeList.FirstOrDefault().AttachmentSubTypeList.Select(s => s.AttachmentSubTypeId).Contains(e.AttachmentSubTypeId)).ToList();
    AttachmentSubType selectedAttachmentSubType = new();
    IEnumerable<int>? deletedAttachmentIdList = new List<int>();
    bool showAttachmentSubType = false;

    IEnumerable<Analysis> expenseAnalysisList = new List<Analysis>();
    IEnumerable<Analysis> groupProjectAnalysisList = new List<Analysis>();
    IEnumerable<Analysis> projectAnalysisList = new List<Analysis>();

    List<MenuItem> menuData = new()
        {
            new MenuItem
            {
                Id = 1,
                Text = "Attachments",
                Items = new List<MenuItem> {
                new MenuItem { Id = 11, Text = "Attachment 1" },
                new MenuItem { Id = 12, Text = "Attachment 2" },
                new MenuItem { Id = 13, Text = "Attachment 3" }
            }
            }
        };

    protected override async Task OnInitializedAsync()
    {
        SetQueryVariables();
        OnAppStateInitialized();
        await LoadData();
    }

    void SetQueryVariables()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            modelId = Convert.ToInt32(_id);
        }
    }

    void OnAppStateInitialized()
    {
        AppState.SetDefaults();

        AppState.AttachmentButtonVisible = true;
        AppState.ReportButtonVisible = true;
        AppState.BackButtonVisible = true;
        AppState.SaveButtonVisible = true;

        AppState.OnAttachmentClick += MenuAttachmentClick;
        AppState.OnBackClick += BackClick;
        AppState.OnSaveClick += Save;
        AppState.OnReloadClick += ReloadClick;
    }

    void IDisposable.Dispose()
    {
        AppState.OnAttachmentClick += MenuAttachmentClick;
        AppState.OnBackClick -= BackClick;
        AppState.OnSaveClick -= Save;
        AppState.OnReloadClick -= ReloadClick;
    }

    async Task LoadData()
    {
        AppState.Loading = true;

        await GetPaymentDocument(modelId);
        SessionData.PaymentDocumentMain = new();
        await GetApproveStageList();
        await GetAnalysisList();

        AppState.Loading = false;
    }

    void BackClick()
    {
        NavigationManager.NavigateTo("/payments");
    }

    async void ReloadClick()
    {
        //await LoadData();
    }

    async Task GetPaymentDocument(int _modelId)
    {
        if (_modelId > 0)
        {
            try
            {
                paymentDocumentMain = await PaymentDocumentService.GetById(_modelId);
            }
            catch (Exception e)
            {
                AppState.ShowAlert(e.Message, Severity.Error);
            }
        }
        paymentDocumentMain = SessionData.PaymentDocumentMain != null && SessionData.PaymentDocumentMain.PaymentDocumentDetailList.Any() ? SessionData.PaymentDocumentMain : modelId > 0 ? paymentDocumentMain : new();
        selectedPaymentDocumentPriority = paymentDocumentMain.PaymentDocumentMainId > 0 ? PaymentDocumentPriority.PaymentDocumentPriorityList.FirstOrDefault(e => e.PaymentDocumentPriorityId == paymentDocumentMain.PaymentDocumentPriorityId) : PaymentDocumentPriority.PaymentDocumentPriorityList.FirstOrDefault(e => e.PaymentDocumentPriorityId == 2);
        var attachmentTypeId = paymentDocumentMain.AttachmentList.Any() ? paymentDocumentMain.AttachmentList.FirstOrDefault().AttachmentTypeId : 0;
        selectedAttachmentType = paymentDocumentMain.PaymentDocumentMainId > 0 && attachmentTypeId > 0 ? AttachmentType.AttachmentTypeList.FirstOrDefault(e => e.AttachmentTypeId == attachmentTypeId) : AttachmentType.AttachmentTypeList.FirstOrDefault();
        if (paymentDocumentMain.PaymentDocumentDetailList.Any())
        {
            poSummaryList = paymentDocumentMain.PaymentDocumentDetailList.OrderBy(e => e.PONum).GroupBy(g => g.PONum).Select(s => new Model
                {
                    PONum = s.Key,
                    POAmount = s.FirstOrDefault().POAmount,
                    PO_VAT = s.FirstOrDefault().PO_VAT,
                    AdvanceAmount = s.FirstOrDefault().AdvanceAmount,
                    AdvanceVAT = s.FirstOrDefault().AdvanceVAT,
                    PaidPaymentDocumentAmount = s.Sum(e => e.PaidAmount + e.PaymentDocumentAmount),
                    PaidPaymentDocumentVAT = s.Sum(e => e.PaidVAT + e.PaymentDocumentVAT),
                    AmountToPay = s.Sum(e => e.AmountToPay),
                    VATToPay = s.Sum(e => e.VATToPay),
                    RemainingAmount = s.Sum(e => e.POAmount - e.AdvanceAmount - e.PaidAmount - e.PaymentDocumentAmount - e.AmountToPay),
                    RemainingVAT = s.Sum(e => e.PO_VAT - e.AdvanceVAT - e.PaidVAT - e.PaymentDocumentVAT - e.VATToPay),
                }).ToList();
        }
    }

    async Task GetAnalysisList()
    {
        expenseAnalysisList = await AnalysisService.GetExpenseTypes();
        groupProjectAnalysisList = await AnalysisService.GetGroupProjects();
        projectAnalysisList = await AnalysisService.GetProjectCodes();
    }

    async Task GetApproveStageList()
    {
        var _approveStageList = await ApproveStageService.GetAllAsync(paymentDocumentMain.PaymentDocumentMainId);
        approveStageList = _approveStageList.ToList();
    }

    void PaymentDocumentPriorityChanged(PaymentDocumentPriority paymentDocumentPriority)
    {
        selectedPaymentDocumentPriority = paymentDocumentPriority;
        paymentDocumentMain.PaymentDocumentPriorityId = selectedPaymentDocumentPriority.PaymentDocumentPriorityId;
    }

    void AttachmentTypeChanged(AttachmentType attachmentType)
    {
        selectedAttachmentType = attachmentType;
        paymentDocumentMain.AttachmentList.ForEach(e => e.AttachmentTypeId = selectedAttachmentType.AttachmentTypeId);
        attachmentSubTypeList = AttachmentSubType.AttachmentSubTypeList.Where(e => selectedAttachmentType.AttachmentSubTypeList.Select(s => s.AttachmentSubTypeId).Contains(e.AttachmentSubTypeId)).ToList();
    }

    void AttachmentSubTypeClick(AttachmentSubType attachmentSubType)
    {
        selectedAttachmentSubType = attachmentSubType;
        FilterAttachmentList(selectedAttachmentSubType.AttachmentSubTypeId);
        showAttachmentSubType = true;
    }

    void FilterAttachmentList(int attachmentSubTypeId)
    {
        filteredAttachmentList = paymentDocumentMain.AttachmentList.Where(e => e.AttachmentSubTypeId == attachmentSubTypeId).ToList();
    }

    void AddItemsToAttachmentList(List<Attachment> attachmentList)
    {
        foreach (var item in attachmentList)
        {
            if (item.AttachmentId == 0)
            {
                paymentDocumentMain.AttachmentList.Add(item);
            }
        }
    }

    void DeleteAttachmentHandler(IEnumerable<Attachment> deletedAttachmentList)
    {
        deletedAttachmentIdList = deletedAttachmentList.Where(e => e.AttachmentId > 0).Select(e => e.AttachmentId);
        foreach (var item in deletedAttachmentList)
        {
            paymentDocumentMain.AttachmentList.Remove(item);
        }
    }

    async void Save()
    {
        AppState.Loading = true;

        var validated = Validate();

        if (validated)
        {
            var result = await PaymentDocumentService.Save(paymentDocumentMain);
            if (result.InsertedResultMessage == null)
            {
                var id = result.ReturnId > 0 ? result.ReturnId : modelId;
                NavigationManager.NavigateTo($"/payments/card?id={id}");
                await GetPaymentDocument(id);
                AppState.ShowAlert("Successfully saved", Severity.Success);
            }
            else
            {
                AppState.ShowAlert(result.InsertedResultMessage, Severity.Error);
            }
        }
        AppState.Loading = false;
    }

    bool Validate()
    {
        if (string.IsNullOrEmpty(paymentDocumentMain.Reference))
        {
            AppState.ShowAlert("Enter document Reference", Severity.Error);
            return false;
        }
        return true;
    }

    void MenuAttachmentClick()
    {
        
    }
}

<style>
    .attachment-subtype .k-grid th, .attachment-subtype .k-grid td {
        padding: 4px 12px;
    }

    .column-3-label {
        width: 81px;
    }
</style>
