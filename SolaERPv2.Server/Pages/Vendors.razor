@page "/vendors"
@implements IDisposable
@inject VendorService VendorService


<PageTitle>Vendors</PageTitle>


<TelerikTabStrip ActiveTabIndex="@activeTabIndex" ActiveTabIndexChanged="@ActiveTabIndexChanged">
    <TabStripTab Title="Waiting for Approval">
        <Content>
            <DataGrid Data="@vendorList"
                      CanExport="true"
                      Height="calc(100vh - 240px)"
                      ShowSearchBar="true"
                      OnRowDoubleClick="@OnRowDoubleClickHandler"
                      SearchFields="@(new List<string> { "VendorCode", "VendorName", "TaxId", "CountryCode", "CompanyWebsite", "StatusName" })"
                      @bind-SelectedItems="@selectedVendorList"
                      HierarchyDetailsField="CompanyUsers">
                <HierarchyContent>
                    @{
                        var vendor = context as Vendor;
                        <TelerikGrid Data="@vendor.CompanyUsers" SelectionMode="GridSelectionMode.Single" OnRowDoubleClick="@OnUserRowDoubleClick">
                            <GridColumns>
                                <GridColumn Field="@(nameof(AppUser.UserName))" Title="UserName" Width="260px" />
                                <GridColumn Field="@(nameof(AppUser.FullName))" Title="Name" Width="180px" />
                                <GridColumn Field="@(nameof(AppUser.Position))" Title="Position" Width="180px" />
                                <GridColumn Field="@(nameof(AppUser.StatusName))" Title="Status" Width="100px">
                                    <Template Context="rowContext">
                                        <div class="flex-center-y">
                                            @{
                                                var user = rowContext as AppUser;
                                                if (user is { StatusId: 0 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Person" Color="Color.Warning" Size="Size.Small" />
                                                }
                                                else if (user is { StatusId: 1 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Person" Color="Color.Success" Size="Size.Small" />
                                                }
                                                else if (user is { StatusId: 2 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.PersonOff" Color="Color.Default" Size="Size.Small" />
                                                }
                                                else if (user is { StatusId: 3 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Person" Color="Color.Info" Size="Size.Small" />
                                                }
                                                else
                                                {
                                                    <span>none</span>
                                                }
                                            }
                                            <span class="k-px-2">@(user.StatusName)</span>
                                        </div>
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </TelerikGrid>
                    }
                </HierarchyContent>
                <DataGridColumns>
                    <GridColumn Field="@(nameof(Vendor.VendorId))" Title="Id" Width="70px" Editable="false" TextAlign="ColumnTextAlign.Right" Visible="false" />
                    <GridColumn Field="@(nameof(Vendor.VendorCode))" Title="Code" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.VendorName))" Title="Name" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.TaxId))" Title="Tax Id" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.CountryCode))" Title="Country" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.CompanyWebsite))" Title="Website" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.NumberOfUsers))" Title="No. of Users" TextAlign="ColumnTextAlign.Right" Width="120px">
                        <Template Context="rowContext">
                            @{
                                var vendor = rowContext as Vendor;
                                var numberOfUsers = vendor != null && vendor.CompanyUsers != null && vendor.CompanyUsers.Any() ? vendor.CompanyUsers.Count() : 0;
                                <span>@numberOfUsers</span>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Vendor.StatusName))" Title="Status" Width="100px">
                        <Template Context="rowContext">
                            <div class="flex-center-y">
                                @{
                                    var vendor = rowContext as Vendor;
                                    if (vendor is { StatusId: 0 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Warning" Size="Size.Small" />
                                    }
                                    else if (vendor is { StatusId: 1 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Success" Size="Size.Small" />
                                    }
                                    else if (vendor is { StatusId: 2 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Default" Size="Size.Small" />
                                    }
                                    else if (vendor is { StatusId: 3 })
                                    {
                                        <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Error" Size="Size.Small" />
                                    }
                                    else
                                    {
                                        <span>-contact-dev-</span>
                                    }
                                }
                                <span class="k-px-2">@(vendor.StatusName)</span>
                            </div>
                        </Template>
                                </GridColumn>
                </DataGridColumns>
            </DataGrid>
        </Content>
    </TabStripTab>

    <TabStripTab Title="All">
        <Content>
            <DataGrid Data="@vendorList"
                      CanExport="true"
                      Height="calc(100vh - 240px)"
                      ShowSearchBar="true"
                      OnRowDoubleClick="@OnRowDoubleClickHandler"
                      SearchFields="@(new List<string> { "VendorCode", "VendorName", "TaxId", "CountryCode", "CompanyWebsite", "StatusName" })"
                      @bind-SelectedItems="@selectedVendorList"
                      HierarchyDetailsField="CompanyUsers">
                <HierarchyContent>
                    @{
                        var vendor = context as Vendor;
                        <TelerikGrid Data="@vendor.CompanyUsers" SelectionMode="GridSelectionMode.Single" OnRowDoubleClick="@OnUserRowDoubleClick">
                            <GridColumns>
                                <GridColumn Field="@(nameof(AppUser.UserName))" Title="UserName" Width="260px" />
                                <GridColumn Field="@(nameof(AppUser.FullName))" Title="Name" Width="180px" />
                                <GridColumn Field="@(nameof(AppUser.Position))" Title="Position" Width="180px" />
                                <GridColumn Field="@(nameof(AppUser.StatusName))" Title="Status" Width="100px">
                                    <Template Context="rowContext">
                                        <div class="flex-center-y">
                                            @{
                                                var user = rowContext as AppUser;
                                                if (user is { StatusId: 0 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Person" Color="Color.Warning" Size="Size.Small" />
                                                }
                                                else if (user is { StatusId: 1 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Person" Color="Color.Success" Size="Size.Small" />
                                                }
                                                else if (user is { StatusId: 2 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.PersonOff" Color="Color.Default" Size="Size.Small" />
                                                }
                                                else if (user is { StatusId: 3 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Person" Color="Color.Info" Size="Size.Small" />
                                                }
                                                else
                                                {
                                                    <span>none</span>
                                                }
                                            }
                                            <span class="k-px-2">@(user.StatusName)</span>
                                        </div>
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </TelerikGrid>
                    }
                </HierarchyContent>
                <DataGridColumns>
                    <GridColumn Field="@(nameof(Vendor.VendorId))" Title="Id" Width="70px" Editable="false" TextAlign="ColumnTextAlign.Right" Visible="false" />
                    <GridColumn Field="@(nameof(Vendor.VendorCode))" Title="Code" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.VendorName))" Title="Name" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.TaxId))" Title="Tax Id" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.CountryCode))" Title="Country" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.CompanyWebsite))" Title="Website" Width="260px" />
                    <GridColumn Field="@(nameof(Vendor.NumberOfUsers))" Title="No. of Users" TextAlign="ColumnTextAlign.Right" Width="120px">
                        <Template Context="rowContext">
                                @{
                                    var vendor = rowContext as Vendor;
                                    var numberOfUsers = vendor != null && vendor.CompanyUsers != null && vendor.CompanyUsers.Any() ? vendor.CompanyUsers.Count() : 0;
                                    <span>@numberOfUsers</span>
                                }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Vendor.StatusName))" Title="Status" Width="100px">
                                    <Template Context="rowContext">
                                        <div class="flex-center-y">
                                            @{
                                                var vendor = rowContext as Vendor;
                                                if (vendor is { StatusId: 0 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Warning" Size="Size.Small" />
                                                }
                                                else if (vendor is { StatusId: 1 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Success" Size="Size.Small" />
                                                }
                                                else if (vendor is { StatusId: 2 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Default" Size="Size.Small" />
                                                }
                                                else if (vendor is { StatusId: 3 })
                                                {
                                                    <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Error" Size="Size.Small" />
                                                }
                                                else
                                                {
                                                    <span>-contact-dev-</span>
                                                }
                                            }
                                            <span class="k-px-2">@(vendor.StatusName)</span>
                                        </div>
                                    </Template>
                                </GridColumn>
                </DataGridColumns>
            </DataGrid>
        </Content>
    </TabStripTab>
</TelerikTabStrip>

<TelerikDialog Visible="@showApproveDialog"
               @ref="approveDialogRef"
               VisibleChanged="@ShowApproveDialogChanged"
               Title="@(approveSelected ? "Approve?" : "Reject?")"
               Width="440px"
               CloseOnOverlayClick="false"
               ShowCloseButton="true">
    <DialogContent>
        <div class="fixed-width k-form">
            <div class="k-form-field">
                <div class="k-form-field-wrap">
                    <label for="approve-comment" class="k-label k-form-label">Comment:</label>
                    <div class="k-form-field-wrap">
                        <TelerikTextArea Id="approve-comment"
                                         AutoSize="true"
                                         PlaceHolder="Enter your text here"
                                         @bind-Value="@approveComment">
                        </TelerikTextArea>
                    </div>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@(() => ApproveRejectConfirmed())" ThemeColor="@(approveSelected ? ThemeConstants.Button.ThemeColor.Primary : ThemeConstants.Button.ThemeColor.Error)">@(approveSelected ? "Approve" : "Reject")</TelerikButton>
        <TelerikButton OnClick="@(() => ApproveDialogClosed())">Close</TelerikButton>
    </DialogButtons>
</TelerikDialog>



@code {

    [CascadingParameter]
    AppState? AppState { get; set; }

    [CascadingParameter]
    DialogFactory? DialogFactory { get; set; }

    List<Vendor>? vendorList = new();
    IEnumerable<Vendor>? selectedVendorList = new List<Vendor>();
    IEnumerable<Status>? vendorStatusList = new List<Status>();

    IEnumerable<Status>? userStatusList = new List<Status>();

    int activeTabIndex = 0;
    bool isWaitingForApproval => activeTabIndex == 0 ? true : false;

    bool showApproveDialog = false;
    string approveComment = "";
    bool approveSelected = false;
    TelerikDialog approveDialogRef;

    //int menuButtonsVisibility => activeTabIndex == 0 ? (() => AppState.ApproveButtonVisible = true; AppState.RejectButtonVisible = true;}) : 0;

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        if (AppState == null) return;
        AppState.SetDefaults();
        SetMenuButtonsVisibility();
        AppState.BackButtonVisible = true;
        AppState.OnBackClick += BackClick;
        AppState.OnApproveClick += ApproveClick;
        AppState.OnRejectClick += RejectClick;
    }

    void IDisposable.Dispose()
    {
        if (AppState == null) return;
        AppState.OnBackClick -= BackClick;
        AppState.OnApproveClick -= ApproveClick;
        AppState.OnRejectClick -= RejectClick;
    }
    
    async Task LoadData()
    {
        userStatusList = AppUserService.GetStatusList();
        vendorStatusList = VendorService.GetStatusList();
        await LoadVendorList();
    }

    async Task LoadVendorList()
    {
        if (AppState == null) return;

        AppState.Loading = true;
        var _vendorList = await VendorService.GetAllExtendedAsync(1, activeTabIndex == 0);
        if (vendorList != null) { vendorList = _vendorList.ToList(); }
        AppState.Loading = false;
    }

    void SetMenuButtonsVisibility()
    {
        if (activeTabIndex == 0)
        {
            AppState.ApproveButtonVisible = true;
            AppState.RejectButtonVisible = true;
        }
        else if (activeTabIndex == 1)
        {
            AppState.ApproveButtonVisible = false;
            AppState.RejectButtonVisible = false;
        }
        else
        {
            AppState.ApproveButtonVisible = false;
            AppState.RejectButtonVisible = false;
        }
    }

    void ApproveClick()
    {
        if (selectedVendorList.Any())
        {
            approveSelected = true;
            showApproveDialog = true;
            AppState.Refresh();
        }
        else
        {
            AppState.ShowAlert("Please select item(s) first", Severity.Warning);
        }
    }

    void RejectClick()
    {
        if (selectedVendorList.Any())
        {
            approveSelected = false;
            showApproveDialog = true;
            AppState.Refresh();
        }
        else
        {
            AppState.ShowAlert("Please select item(s) first", Severity.Warning);
        }
    }

    void ShowApproveDialogChanged(bool visible)
    {
        showApproveDialog = visible;
        if (!visible)
        {
            ApproveDialogClosed();
        }
    }

    void ApproveDialogClosed()
    {
        approveComment = "";
        showApproveDialog = false;
    }

    async Task ApproveRejectConfirmed()
    {
        var approveDataList = new List<ApproveData>();
        foreach (var item in selectedVendorList)
        {
            var newItem = new ApproveData { ModelId = item.VendorId, ApproveStatusId = (approveSelected ? 1 : 99), Comment = approveComment, Sequence = 0 };
            approveDataList.Add(newItem);
        }
        var result = await VendorService.Approve(approveDataList);
        if (result.QueryResultMessage == null)
        {
            await LoadVendorList();
            AppState.ShowAlert("Successfully updated", Severity.Success);
        }
        else
        {
            AppState.ShowAlert(result.QueryResultMessage, Severity.Error);
        }
        ApproveDialogClosed();
    }

    void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/vendors/card?id={id}");
    }

    void OnRowClickHandler(GridRowClickEventArgs args)
    {
        if (args.Item is AppUser argsItem) { }
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        if (args.Item is Vendor argsItem) { GoToDetails(argsItem.VendorId); }
    }

    void OnUserRowDoubleClick(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as AppUser;
        NavigationManager.NavigateTo($"/users/card?id={argsItem.Id}");
    }
    
    void BackClick()
    {
        NavigationManager.NavigateTo("/");
    }

    async Task ActiveTabIndexChanged(int tabIndex)
    {
        if (AppState == null) return;

        AppState.Loading = true;
        activeTabIndex = tabIndex;
        selectedVendorList = new List<Vendor>();
        SetMenuButtonsVisibility();
        await LoadVendorList();
        AppState.Loading = false;
    }

}